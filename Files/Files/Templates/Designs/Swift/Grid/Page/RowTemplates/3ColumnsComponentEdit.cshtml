@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@{ 
	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();

	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-1 gap-md-4 gap-lg-5";
	}

	string pushDown = "";
	string columnPosition = Model.Item.GetRawValueString("ColumnPosition", "align-items-center").ToLower();
	if (columnPosition == "top")
	{
		columnPosition = "align-items-start";
	}
	if (columnPosition == "center")
	{
		columnPosition = "align-items-center";
	}
	if (columnPosition == "bottom")
	{
		columnPosition = "align-items-end";
		pushDown = "mt-auto";
	}

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "spacing");
	string sectionClass = "";
	sectionClass = spaceBetweenRows == "spacing" ? "py-2" : sectionClass;
	sectionClass = spaceBetweenRows == "spacing-large" ? "py-3 py-lg-4" : sectionClass;
	sectionClass = spaceBetweenRows == "spacing-top" ? "pt-3 pt-lg-4" : sectionClass;
	sectionClass = spaceBetweenRows == "spacing-bottom" ? "pb-3 pb-4" : sectionClass;

	string column1width = Model.Item.GetRawValueString("Column_1Width", "").ToLower();
	column1width = column1width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column2width = Model.Item.GetRawValueString("Column_2Width", "").ToLower();
	column2width = column2width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string column3width = Model.Item.GetRawValueString("Column_3Width", "").ToLower();
	column3width = column3width == "grow" ? "flex-grow-1" : "flex-grow-0";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	if (Pageview.IsVisualEditorMode || !string.IsNullOrWhiteSpace(Model.Column(1).Output()) || !string.IsNullOrWhiteSpace(Model.Column(2).Output()) || !string.IsNullOrWhiteSpace(Model.Column(3).Output()))
	{
		<div class="@theme @pushDown">
			<div class="d-flex flex-row @rowClass @columnPosition @sectionClass h-100">
				<div class="col @column1width" data-col-size="4">
					@Model.Column(1).Output()
				</div>
				<div class="col @column2width" data-col-size="4">
					@Model.Column(2).Output()
				</div>
				<div class="col @column3width" data-col-size="4">
					@Model.Column(3).Output()
				</div>
			</div>
		</div>
	}
}
