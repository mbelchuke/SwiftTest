@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.GridRowViewModel>

@{ 
	string sectionClass = "py-2";
	string containerClass = "container-xl";

	string spaceBetweenRows = Model.Item.GetRawValueString("SpaceBetweenRows", "").ToLower();
	if (spaceBetweenRows != "spacing") {
		sectionClass = "";
	}
	if (spaceBetweenRows == "spacing-large")
	{
		sectionClass = "py-4 py-lg-6";
	}
	if (spaceBetweenRows == "spacing-top")
	{
		sectionClass = "pt-4 pt-lg-6";
	}
	if (spaceBetweenRows == "spacing-bottom")
	{
		sectionClass = "pb-4 pb-6";
	}

	string width = Model.Item.GetRawValueString("Width", "").ToLower();
	if (width == "stretch") {
		containerClass = "container-fluid";
	}
	if (width == "none") {
		containerClass = "";
	}
	if (width == "compressed") {
		containerClass = " container-compressed";
	}

	string rowClass = "gap-3";
	string spaceBetweenColumns = Model.Item.GetRawValueString("SpaceBetweenColumns", "").ToLower();
	if (spaceBetweenColumns == "stick")
	{
		rowClass = "gap-0";
	}
	if (spaceBetweenColumns == "spacing-medium")
	{
		rowClass = "gap-lg-4";
	}
	if (spaceBetweenColumns == "spacing-large")
	{
		rowClass = "gap-1 gap-md-4 gap-lg-5";
	}

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	string animationOnScrollCol1 = Model.Item.GetRawValueString("AnimationOnScrollCol1", "no-animation");
	animationOnScrollCol1 = animationOnScrollCol1 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol1 + "'" : "";
	string animationOnScrollCol2 = Model.Item.GetRawValueString("AnimationOnScrollCol2", "no-animation");
	animationOnScrollCol2 = animationOnScrollCol2 != "no-animation" ? "data-aos=" + "'" + animationOnScrollCol2 + "'" : "";

	string hideOverflow = " overflow-hidden";
	hideOverflow =
				animationOnScrollCol1 != "" ||
				animationOnScrollCol2 != ""
				? hideOverflow : "";

	Dynamicweb.Frontend.FileViewModel backgroundImage = Model.Item.GetFile("BackgroundImage");
	string backgroundImagePath = backgroundImage?.Path ?? string.Empty;
	string imagePath = $"/Admin/Public/GetImage.ashx?image={backgroundImagePath}&width=960&format=webp";
	backgroundImagePath = Dynamicweb.Context.Current.Server.UrlEncode(backgroundImagePath);
	string backgroundRepeat = Model.Item.GetRawValueString("BackgroundImageRepeat", "no-repeat");
	string backgroundImageSize = Model.Item.GetRawValueString("BackgroundImageSize", "initial");
	int xPos = backgroundImage?.FocalPositionFromLeft ?? 50;
	int yPos = backgroundImage?.FocalPositionFromTop ?? 50;
	string cssPosition = $"{xPos}% {yPos}%";
	string gradient = Model.Item.GetRawValueString("Gradient", string.Empty);
	string gradientOpacity = Model.Item.GetRawValueString("GradientOpacity", "0.00");
	string gradientString = "linear-gradient(" + gradient + "deg," + "rgba(var(--swift-foreground-color-rgb)," + gradientOpacity + "), rgba(var(--swift-background-color-rgb)," + gradientOpacity + "))";
	string backgroundImageString = "url(" + backgroundImagePath + ")";
	string backgroundImagePositionString = "background-position:" + cssPosition + ";";
	string backgroundRepeatString = "background-repeat:" + backgroundRepeat + ";";
	string backgroundImageSizeString = "background-size:" + backgroundImageSize + ";";
	string styleString = string.Empty;

	@* Only gradient *@

	if (!string.IsNullOrEmpty(gradient) && string.IsNullOrEmpty(backgroundImagePath))
	{
		styleString += "style=\"background-image:" + gradientString + ";\"";
	}
	
	@* Only background image *@
	
	else if (string.IsNullOrEmpty(gradient) && !string.IsNullOrEmpty(backgroundImagePath) && gradientOpacity != ("0.00"))
	{
		styleString += "style=\"background-image:" + backgroundImageString + "," + backgroundImagePositionString + backgroundRepeatString + backgroundImageSizeString + "\"";
	}
	
	@* Gradient and background image *@

	else if (!string.IsNullOrEmpty(gradient) && !string.IsNullOrEmpty(backgroundImagePath))
	{
		styleString += "style=\"background-image:" + gradientString + "," + backgroundImageString + ";" + backgroundImagePositionString + backgroundRepeatString + backgroundImageSizeString + "\"";
	}	
}

<div class="@(sectionClass)@(theme) item_@Model.Item.SystemName.ToLower()" @styleString>
	<div class="@containerClass@(hideOverflow) @Model.Item.GetString("Theme")">
		<div class="grid @rowClass">
			<div class="g-col-12 g-col-lg-3" data-col-size="3" @animationOnScrollCol1>
				@Model.Column(1).Output()
			</div>
			<div class="g-col-12 g-col-lg-9" data-col-size="9" @animationOnScrollCol2>
				@Model.Column(2).Output()
			</div>
		</div>
	</div>
</div>
