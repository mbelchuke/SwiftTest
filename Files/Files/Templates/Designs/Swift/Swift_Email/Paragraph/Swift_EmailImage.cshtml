@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@functions {
	private string GetTableReset()
	{
		return "border:0;margin:0;outline:0;padding:0;";
	}
}

@{
	string blockType = "image_block";

	var page = Dynamicweb.Services.Pages.GetPage(Pageview.ID);
	var settings = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page?.Parent).Item;
	var blockId = Model.ID;
	var block = Model.Item;

	var emailContentThemeId = settings.GetRawValueString("EmailContentTheme");
	var emailContentThemeParagraph = emailContentThemeId != null && emailContentThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(emailContentThemeId)) : null;
	var emailContentTheme = emailContentThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(emailContentThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(emailContentThemeParagraph)?.Item : null;

	var rowId = Pageview.CurrentParagraph.GridRowId;
	var row = Dynamicweb.Services.Grids.GetGridRowById(rowId);
	var rowItem = Dynamicweb.Services.Items.GetItem(row.ItemType, row.ItemId);
	var rowThemeId = Dynamicweb.Core.Converter.ToString(rowItem["ColumnBackground"]);
	var rowThemeParagraph = rowThemeId != null && rowThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(rowThemeId)) : null;
	var rowTheme = rowThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(rowThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(rowThemeParagraph)?.Item : null;

	var blockThemeId = block.GetRawValueString("Theme");
	var blockThemeParagraph = blockThemeId != null && blockThemeId != string.Empty ? Dynamicweb.Services.Paragraphs.GetParagraph(Dynamicweb.Core.Converter.ToInt32(blockThemeId)) : null;
	var blockTheme = blockThemeParagraph != null && Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph).Item.GetString("CssClassName") != string.Empty ? Dynamicweb.Frontend.ContentViewModelFactory.CreateParagraphInfoViewModel(blockThemeParagraph)?.Item : rowTheme is object ? rowTheme : emailContentTheme;

	string padding = block.GetRawValueString("Padding", "0");
	var link = new Dynamicweb.Frontend.LinkViewModel();
	string linkType = block.GetRawValueString("LinkType", "page");

	if (linkType == "page" && block.GetLink("PageLink") != null)
	{
		link = block.GetLink("PageLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = block.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = block.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}
}

<table id="@blockId" class="@blockType" align="center" border="0" cellpadding="0" cellspacing="0" role="presentation" style="mso-table-lspace:0pt;mso-table-rspace:0pt;mso-line-height-rule:exactly;@GetTableReset()color:inherit;width:100%;">
	<tbody>
		<tr style="@GetTableReset()">
			<td style="mso-table-lspace:0pt;mso-table-rspace:0pt;mso-line-height-rule:exactly;text-align:left;@GetTableReset()vertical-align:top;padding:@(padding)px" width="100%">
				<div align="left">
					@if (link is object && !string.IsNullOrEmpty(link.Url))
					{
						<a href="@link" target="_blank" style="display:block;">
							@RenderImage(padding, blockTheme)
						</a>
					}
					else
					{
						@RenderImage(padding, blockTheme)
					}
				</div>
			</td>
		</tr>
	</tbody>
</table>

@helper RenderImage(string padding, Dynamicweb.Frontend.ItemViewModel theme)
{
	var imageRatio = Model.Item.GetRawValueString("ImageAspectRatio", "4-3").ToLower();
	var parms = new Dictionary<string, object>();
	parms.Add("alt", Model.Item.GetString("ImageAltText"));
	parms.Add("columns", Model.GridRowColumnCount);
	parms.Add("padding", Dynamicweb.Core.Converter.ToInt32(padding) * 2);
	parms.Add("imageRatio", imageRatio);

	@RenderPartial("Swift_Email/Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
}
