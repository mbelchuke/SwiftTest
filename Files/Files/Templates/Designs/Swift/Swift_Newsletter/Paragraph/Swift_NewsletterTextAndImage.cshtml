@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Dynamicweb.Frontend
@using Page = Dynamicweb.Content.Page
@using Dynamicweb.Ecommerce.ProductCatalog
@functions
{
	private string GetImageHandlerImage(FileViewModel imageFile)
	{
		int imageWidth = GetImageWidth();
		string imagePath = imageFile?.Path ?? "";
		string focalPoints = imageFile?.GetFocalPointParameters() ?? "";
		string imageRatio = GetImageRatio();
		string image = $"/Admin/Public/GetImage.ashx?width={imageWidth}";
		string crop = "7";

		if (imageRatio != "original")
		{
			if (!string.IsNullOrEmpty(imageRatio))
			{
				image += $"&height={GetImageHeight(imageRatio, imageWidth)}&fillcanvas=true&{focalPoints}";
			}
		}

		image += $"&crop={crop}&image={imagePath}";

		return image;
	}

	private int GetImageWidth()
	{
		int newsletterWidth = Pageview != null ? Dynamicweb.Core.Converter.ToInt32(Pageview.Page.Item["Width"]) : 660;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		int padding = Convert.ToInt16(Model.Item.GetRawValueString("ContentPadding", "0")) * 2;

		if (grid == null) return newsletterWidth - padding;

		var definitionId = grid.DefinitionId;

		if (definitionId == "1Column") return newsletterWidth - padding;

		var item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		var spaceBetweenColumns = item["SpaceBetweenColumns"].ToString();
		var spacing = 20;

		return spaceBetweenColumns != "spacing" ? newsletterWidth / 2 - padding : (newsletterWidth - spacing) / 2 - padding;
	}

	private static string GetImageHeight(string imageRatio, int imageWidth)
	{
		string[] ratioValues = imageRatio.Split('-');
		double ratio = ratioValues.Length == 2 ? Dynamicweb.Core.Converter.ToDouble(ratioValues[1]) / Dynamicweb.Core.Converter.ToDouble(ratioValues[0]) : 1;
		return Dynamicweb.Core.Converter.ToInt32(Dynamicweb.Core.Converter.ToInt32(imageWidth) * ratio).ToString();
	}

	private string GetImageRatio()
	{
		return Model.Item.GetRawValueString("ImageAspectRatio", "original");
	}

	private string GetThemeValue(string systemName)
	{
		int themesPageId = Pageview.AreaSettings.GetLink("ThemesPage") != null ? Pageview.AreaSettings.GetLink("ThemesPage").PageId : 0;
		if (themesPageId == 0) return "";

		List<Paragraph> themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themesPageId)?.ToList();
		string theme = GetSelectedTheme();
		Paragraph themeParagraph = themesPageParagraphs?.FirstOrDefault(p => p.Item["Name"].ToString().ToLower().Equals(theme));
		if (themeParagraph == null) return "";
		string themeValue = themeParagraph.Item[systemName] != null ? themeParagraph.Item[systemName].ToString() : "";
		themeValue = themeValue == "" ? "unset" : themeValue;
		return themeValue;
	}

	private string GetSelectedTheme()
	{
		string theme = !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["Theme"]?.ToString()) ? Pageview.CurrentParagraph.Item["Theme"].ToString().ToLower() : "";
		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		Item item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		theme = item["Theme"]?.ToString().ToLower();

		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;

		theme = Dynamicweb.Core.Converter.ToString(Pageview.Page.Item["Theme"])?.ToLower();
		return !string.IsNullOrEmpty(theme) && theme != "theme default" ? theme : "";
	}

	private string GetFontStyle(string type)
	{
		int brandingPageId = Pageview.AreaSettings.GetLink("BrandingPage") != null ? Pageview.AreaSettings.GetLink("BrandingPage").PageId : 0;
		if (brandingPageId == 0) return "";

		Page brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId);
		if (brandingPage == null) return "";

		string fontStyle = "";
		dynamic font = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item[type + "Font"].ToString());
		if (font != null)
		{
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"text-transform:{brandingPage.Item[type + "Casing"]};";
		fontStyle += $"line-height:{brandingPage.Item[type + "LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type + "LetterSpacing"]};";
		return fontStyle;
	}
}
@{
	string layout = Model.Item.GetRawValueString("Layout", "image-top");
	string backgroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("BackgroundColor") : "transparent";
	string bodyFontStyle = GetFontStyle("Body");
	string padding = Model.Item.GetRawValueString("ContentPadding", "0") + "px";
}
<td class="mb-0" style="padding:@padding;background-color:@backgroundColor;vertical-align:center;font-size: 16px;">
	<div style="@bodyFontStyle">
		@switch (layout)
		{
			case "image-top":
				@RenderImage()
				@RenderTitle()
				@RenderLead()
				@RenderText()
				@RenderButton()
				break;

			case "title-top":
				@RenderTitle()
				@RenderImage()
				@RenderLead()
				@RenderText()
				@RenderButton()
				break;

			case "title-lead-top":
				@RenderTitle()
				@RenderLead()
				@RenderImage()
				@RenderText()
				@RenderButton()
				break;

			case "text-center":
				@RenderImage("center")
				@RenderTitle("center")
				@RenderLead("center")
				@RenderText("center")
				@RenderButton("center")
				break;
		}
	</div>
</td>

@helper RenderImage(string horizontalAlignment = "left")
{
	FileViewModel imageFile = Model.Item.GetFile("Image");

	if (imageFile != null)
	{
		string altText = Model.Item.GetString("Title"); //TODO: add alt text to image?
		string width = GetImageRatio() == "original" ? "" : "width:100%";
		<div align="@horizontalAlignment" style="margin-bottom: 16px">
			<img style="border: 0;display: block;height: auto;max-width: 100%;@width" alt="@altText" src="@GetImageHandlerImage(imageFile)">
		</div>
	}
}

@helper RenderTitle(string horizontalAlignment = "left")
{
	string title = Model.Item.GetString("Title");
	string titleFontSizeClass = Model.Item?.GetRawValueString("TitleFontSize", "size-44");
	string titleFontSize = (titleFontSizeClass?.Split('-')[1] ?? "44") + "px";
	string foregroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ForegroundColor") : "#000000";
	string headerFontStyle = GetFontStyle("Header");

	if (!string.IsNullOrEmpty(title) && !Model.Item.GetBoolean("HideTitle"))
	{
		<div style="margin-bottom:16px;mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
			<h1 class="@titleFontSizeClass" style="text-align:@horizontalAlignment;margin:0;font-size:@titleFontSize;@headerFontStyle;" lang="x-@titleFontSizeClass">
				<span>
					<span style="color:@foregroundColor">
						<strong>@title</strong>
					</span>
				</span>
			</h1>
		</div>
	}
}

@helper RenderLead(string horizontalAlignment = "left")
{
	string lead = Model.Item.GetString("Lead");
	string subtitleFontSizeClass = Model.Item.GetRawValueString("SubtitleFontSize", "size-20");
	string subtitleFontSize = (subtitleFontSizeClass?.Split('-')[1] ?? "20") + "px";
	string foregroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ForegroundColor") : "#000000";
	string displayFontStyle = GetFontStyle("Display");

	if (!string.IsNullOrEmpty(lead))
	{
		<div style="margin-bottom:16px;text-align:@horizontalAlignment;mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;">
			<p class="@subtitleFontSizeClass" style="margin:0;font-size:@subtitleFontSize;color:@foregroundColor;@displayFontStyle" lang="x-@subtitleFontSizeClass">
				@lead
			</p>
		</div>
	}
}

@helper RenderText(string horizontalAlignment = "left")
{
	string text = Model.Item?.GetString("Text") ?? "";
	string foregroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ForegroundColor") : "#000000";

	if (!string.IsNullOrEmpty(text))
	{
		<div class="mb-0 mt-0" style="text-align:@horizontalAlignment;mso-line-height-rule: exactly;mso-text-raise: 11px;vertical-align: middle;color:@foregroundColor">
			@text
		</div>
	}
}

@helper RenderButton(string horizontalAlignment = "left")
{
	string label = Model.Item?.GetString("ButtonLabel") ?? "";
	string buttonBackgroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ButtonPrimaryBackgroundColor") : "#000000";
	string buttonForegroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ButtonPrimaryForegroundColor") : "#FFFFFF";

	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	var uri = Dynamicweb.Context.Current.Request.Url;
	var hostname = uri.Scheme + Uri.SchemeDelimiter + uri.Host;

	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (link != null && !string.IsNullOrEmpty(label))
	{
		string formatedUrl = string.Empty;

		if (!link.IsExternal)
		{
			formatedUrl = hostname+link.Url;
		}
		else
		{
			formatedUrl = link.Url;
		}
	
		<div class="btn" style="text-align:@horizontalAlignment;">
			<![if !mso]>
			<a href="@formatedUrl" style="border-radius: 0;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: @buttonForegroundColor !important;background-color:@buttonBackgroundColor;">
				@label
			</a>
			<![endif]>
			<!--[if mso]>
				<v:rect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="@formatedUrl" style="height:60px;width:300px;margin-top:20px;v-text-anchor:middle;" fillcolor="@buttonBackgroundColor" stroke="f">
					<v:textbox style="mso-fit-shape-to-text:t" inset="10px,12px,10px,12px">
						<center style="font-size:14px;line-height:24px;color:@buttonForegroundColor;background-color:@buttonBackgroundColor">
							@label
						</center>
					</v:textbox>
				</v:rect>
			<![endif]-->
		</div>
	}
}
