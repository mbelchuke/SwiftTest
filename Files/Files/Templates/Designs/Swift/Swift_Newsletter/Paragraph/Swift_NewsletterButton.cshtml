@using Dynamicweb.Content
@using Dynamicweb.Content.Items
@using Page = Dynamicweb.Content.Page
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@functions
{
	private string GetAlignment(string direction)
	{
		var layout = Model.Item.GetRawValueString("Layout", "middle-center");
		var alignments = layout.Split('-');
		var indexPosition = direction == "vertical" ? 0 : 1;

		if (alignments.Length == 2)
		{
			return alignments.Length == 2 ? alignments[indexPosition] : "middle";
		}
		
		return direction == "vertical" ? "middle" : "center";
	}
	
	private string GetThemeValue(string systemName)
	{
		int themesPageId = Pageview.AreaSettings.GetLink("ThemesPage") != null ? Pageview.AreaSettings.GetLink("ThemesPage").PageId : 0;
		if (themesPageId == 0) return "";
        
		List<Paragraph> themesPageParagraphs = Dynamicweb.Services.Paragraphs.GetParagraphsByPageId(themesPageId)?.ToList();
		string theme = GetSelectedTheme();
		Paragraph themeParagraph = themesPageParagraphs?.FirstOrDefault(p => p.Item["Name"].ToString().ToLower().Equals(theme));
		if (themeParagraph == null) return "";
		string themeValue = themeParagraph.Item[systemName] != null ? themeParagraph.Item[systemName].ToString() : "";
		themeValue = themeValue == "" ? "unset" : themeValue;
		return themeValue;
	}

	private string GetSelectedTheme()
	{
		string theme = !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["Theme"]?.ToString()) ? Pageview.CurrentParagraph.Item["Theme"].ToString().ToLower() : "";
		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		Item item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		theme = item["Theme"]?.ToString().ToLower();
		
		if (!string.IsNullOrEmpty(theme) && theme != "theme default") return theme;
		
		theme = Dynamicweb.Core.Converter.ToString(Pageview.Page.Item["Theme"])?.ToLower();
		return !string.IsNullOrEmpty(theme) && theme != "theme default" ? theme : "";
	}
	
	private string GetFontStyle(string type)
	{
		int brandingPageId = Pageview.AreaSettings.GetLink("BrandingPage") != null ? Pageview.AreaSettings.GetLink("BrandingPage").PageId : 0;
		if (brandingPageId == 0) return "";
		
		Page brandingPage = Dynamicweb.Services.Pages?.GetPage(brandingPageId);
		if (brandingPage == null) return "";
		
		string fontStyle = "";
		dynamic font = Newtonsoft.Json.JsonConvert.DeserializeObject(brandingPage.Item[type+"Font"].ToString());
		if (font != null) {
			fontStyle += $"font-family:{font.Family}, sans-serif;";
			fontStyle += $"font-weight:{font.SelectedVariant};";
		}
		fontStyle += $"text-transform:{brandingPage.Item[type+"Casing"]};";
		fontStyle += $"line-height:{brandingPage.Item[type+"LineHeight"]};";
		fontStyle += $"letter-spacing:{brandingPage.Item[type+"LetterSpacing"]};";
		return fontStyle;
	}
}
@{
	string verticalAlignment = GetAlignment("vertical");
	string bodyFontStyle = GetFontStyle("Body");
	string backgroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("BackgroundColor") : "transparent";
	string padding = Model.Item.GetRawValueString("ContentPadding", "0") + "px";
}
<td height="100%"
    style="padding:@padding;vertical-align:@verticalAlignment;background-color:@backgroundColor;text-align: left;font-size: 14px;height:100%;@bodyFontStyle"
    valign="@verticalAlignment">
	@RenderButton()
</td>

@helper RenderButton()
{
	string title = Model.Item?.GetString("Title") ?? "";
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	link = Model.Item?.GetLink("Link");
	string formatedUrl = string.Empty;

	var uri = Dynamicweb.Context.Current.Request.Url;
	var hostname = uri.Scheme + Uri.SchemeDelimiter + uri.Host;
	string horizontalAlignment = GetAlignment("horizontal");
	string buttonBackgroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ButtonPrimaryBackgroundColor") : "#000000";
	string buttonForegroundColor = !string.IsNullOrEmpty(GetSelectedTheme()) ? GetThemeValue("ButtonPrimaryForegroundColor") : "#FFFFFF";

	if (!link.IsExternal)
    {
		formatedUrl = hostname+link.Url;
    }
	else
    {
		formatedUrl = link.Url;
    }
	

<div class="btn" style="text-align:@horizontalAlignment;">
	<![if !mso]>
	<a href="@formatedUrl" style="border-radius: 0;display: inline-block;font-size: 14px;font-weight: bold;line-height: 24px;padding: 12px 24px;text-align: center;text-decoration: none !important;transition: opacity 0.1s ease-in;color: @buttonForegroundColor !important;background-color: @buttonBackgroundColor;">
		@title
	</a>
	<![endif]>
	<!--[if mso]>
		<v:rect xmlns:v="urn:schemas-microsoft-com:vml" xmlns:w="urn:schemas-microsoft-com:office:word" href="@formatedUrl" style="height:60px;width:300px;margin-top:20px;v-text-anchor:middle;" fillcolor="@buttonBackgroundColor" stroke="f">
			<v:textbox style="mso-fit-shape-to-text:t" inset="10px,12px,10px,12px">
				<center style="font-size:14px;line-height:24px;color:@buttonForegroundColor;background-color:@buttonBackgroundColor;font-weight:bold;mso-line-height-rule:exactly;mso-text-raise:4px">
					@title
				</center>
			</v:textbox>
		</v:rect>
	<![endif]-->
</div>
}
