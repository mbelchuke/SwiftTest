@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Content
@functions
{
	private string GetImageHandlerImage()
	{
		var imageWidth = GetImageWidth();
		var imageFile = Model.Item?.GetFile("Image");
		string imagePath = imageFile?.Path ?? "";
		string focalPoints = imageFile?.GetFocalPointParameters() ?? "";
		string imageRatio = GetImageRatio();
		string image = $"/Admin/Public/GetImage.ashx?width={imageWidth}";
		string crop = "7";

		if (imageRatio != "original")
		{
			if (!string.IsNullOrEmpty(imageRatio))
			{
				image += $"&height={GetImageHeight(imageRatio, imageWidth)}&fillcanvas=true&{focalPoints}";
			}
		}

		image += $"&crop={crop}&image={imagePath}";

		return image;
	}

	private int GetImageWidth()
	{
		int newsletterWidth = Pageview != null ? Dynamicweb.Core.Converter.ToInt32(Pageview.Page.Item["Width"]) : 660;

		GridRow grid = Dynamicweb.Services.Grids.GetGridRowById(Pageview.CurrentParagraph.GridRowId);
		int padding = Convert.ToInt16(Model.Item.GetRawValueString("ContentPadding", "0")) * 2;

		if (grid == null) return newsletterWidth - padding;

		var definitionId = grid.DefinitionId;

		if (definitionId == "1Column") return newsletterWidth - padding;

		var item = Dynamicweb.Services.Items.GetItem(grid.ItemType, grid.ItemId);
		var spaceBetweenColumns = item["SpaceBetweenColumns"].ToString();
		var spacing = 20;

		return spaceBetweenColumns != "spacing" ? newsletterWidth / 2 - padding : (newsletterWidth - spacing) / 2 - padding;
	}

	private static string GetImageHeight(string imageRatio, int imageWidth)
	{
		string[] ratioValues = imageRatio.Split('-');
		double ratio = ratioValues.Length == 2 ? Dynamicweb.Core.Converter.ToDouble(ratioValues[1]) / Dynamicweb.Core.Converter.ToDouble(ratioValues[0]) : 1;
		return Dynamicweb.Core.Converter.ToInt32(Dynamicweb.Core.Converter.ToInt32(imageWidth) * ratio).ToString();
	}

	private string GetImageRatio()
	{
		return Model.Item.GetRawValueString("ImageAspectRatio", "original");
	}

	private string GetAlignment(string direction)
	{
		var ratio = Model.Item.GetRawValueString("ImageAspectRatio");

		var layout = Model.Item.GetRawValueString("Layout", "middle-center");
		layout = ratio != "original" ? Model.Item.GetRawValueString("LayoutRatio", "middle-center") : layout;

		var alignments = layout.Split('-');
		var indexPosition = direction == "vertical" ? 0 : 1;

		if (alignments.Length == 2)
		{
			return alignments.Length == 2 ? alignments[indexPosition] : "middle";
		}

		return direction == "vertical" ? "middle" : "center";
	}
}
@{
	string link = Model.Item?.GetString("Link") ?? "";
	string horizontalAlignment = GetAlignment("horizontal");
	string verticalAlignment = GetAlignment("vertical");
	string padding = Model.Item.GetRawValueString("ContentPadding", "0") + "px";
}
<td style="padding:@padding;vertical-align:@verticalAlignment;line-height: 21px;">
	<div align="@horizontalAlignment">
		@if (!string.IsNullOrEmpty(link))
		{
			<a style="transition: opacity 0.1s ease-in;" href="@link">
				@RenderImage()
			</a>
		}
		else
		{
			@RenderImage()
		}
	</div>
</td>

@helper RenderImage()
{
	string altText = Model.Item?.GetString("AltText") ?? "";
	string width = GetImageRatio() == "original" ? "" : "width:100%";
	<img style="border: 0;display: block;height: auto;max-width: 100%;@width" alt="@altText" src="@GetImageHandlerImage()">
}
