@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = string.Empty;

	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "align-middle-center-text-center");
	string alignment = string.Empty;

	string posterPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string posterPaddingClass = string.Empty;

	string posterHeight = Model.Item.GetRawValueString("PosterHeight", "large");
	string posterSizeBase = posterHeight.Contains("%") || posterHeight.Contains("0") ? "aspect-ratio" : "height";
	string posterHeightClass = string.Empty;

	switch(posterPadding)
	{
		case "none":
			posterPaddingClass = " p-3 px-xl-3 py-xl-4";
			break;
		case "small":
			posterPaddingClass = " p-3 p-xl-4";
			break;
		case "large":
			posterPaddingClass = " p-4 p-xl-5";
			break;
	}

	switch (layout)
	{
		case "align-top-left-text-left":
			alignment = " text-start justify-content-start align-items-start";
			break;
		case "align-top-center-text-center":
			alignment = " text-center justify-content-start align-items-center";
			break;
		case "align-top-right-text-right":
			alignment = " text-end justify-content-start align-items-end";
			break;
		case "align-middle-left-text-left":
			alignment = " text-start justify-content-center align-items-start";
			break;
		case "align-middle-center-text-center":
			alignment = " text-center justify-content-center align-items-center";
			break;
		case "align-middle-right-text-right":
			alignment = " text-end justify-content-center align-items-end";
			break;
		case "align-bottom-left-text-left":
			alignment = " text-start justify-content-end align-items-start";
			break;
		case "align-bottom-center-text-center":
			alignment = " text-center justify-content-end align-items-center";
			break;
		case "align-bottom-right-text-right":
			alignment = " text-end justify-content-end align-items-end";
			break;
	}

	switch (posterHeight)
	{
		case "small":
			posterHeightClass = " min-vh-25 min-vh-md-50";
			break;
		case "medium":
			posterHeightClass = " min-vh-50 min-vh-md-75";
			break;
		case "large":
			posterHeightClass = " min-vh-75 min-vh-md-100";
			break;
	}
}

<div class="position-relative@(theme)@(movePageBehindClass) item_@Model.Item.SystemName.ToLower()">

	@if (posterSizeBase == "height")
	{
		if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
		{
			@RenderImage(posterSizeBase)
		}

		if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
		{
			<div class="container-xl h-100 px-0">
				<div class="h-100 position-relative d-flex flex-column gap-3 gap-md-4@(posterPaddingClass)@(alignment)@(posterHeightClass)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButtons(link, link2)
				</div>
			</div>
		}
	}

	@if (posterSizeBase == "aspect-ratio")
	{
		if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
		{
			@RenderImage(posterSizeBase)
		}

		if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
		{
			if (string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				string ratio = Model.Item.GetRawValueString("PosterHeight", string.Empty);
				ratio = ratio != "0" ? ratio : "";
				string ratioCssClass = ratio != "" ? "ratio" : "";
				string ratioVariable = ratio != "" ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : "";

				<div class="container-xl px-0 @ratioCssClass" @ratioVariable>
					<div class="h-100 d-flex flex-column gap-3 gap-md-4@(posterPaddingClass)@(alignment)@(posterHeightClass)" id="Poster_@Pageview.CurrentParagraph.ID">
						@RenderTitle()
						@RenderText()
						@RenderButtons(link, link2)
					</div>
				</div>
			}
			else
			{ 
			<div class="position-absolute top-0 bottom-0 end-0 start-0">
				<div class="container-xl h-100 d-flex flex-column gap-3 gap-md-4@(posterPaddingClass)@(alignment)@(posterHeightClass)" id="Poster_@Pageview.CurrentParagraph.ID">
					@RenderTitle()
					@RenderText()
					@RenderButtons(link, link2)
				</div>
			</div>
			}
		}
	}

</div>

@helper RenderImage(string posterSizeBase)
{
	string image = Model.Item.GetString("Image", string.Empty);

	if (!string.IsNullOrEmpty(image))
	{
		string imageFilter = Model.Item.GetRawValueString("ImageFilter", string.Empty) == "filter" ? " image-filter" : string.Empty;

		string ratio = Model.Item.GetRawValueString("PosterHeight").Contains("%") || Model.Item.GetRawValueString("PosterHeight").Contains("0") ? Model.Item.GetRawValueString("PosterHeight") : string.Empty;

		ratio = ratio != "0" ? ratio : "";
		string ratioCssClass = ratio != "" ? " ratio" : "";
		string ratioVariable = ratio != "" ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : "";
		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;

		var parms = new Dictionary<string, object>();
		parms.Add("columns", Model.GridRowColumnCount);
		parms.Add("cssClass", "h-100 w-100");

		if (posterSizeBase == "height")
		{
			<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</div>
		}

		if (posterSizeBase == "aspect-ratio")
		{
			<figure class="m-0@(imageFilter)@(ratioCssClass)" @ratioVariable>
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</figure>
		}
	}
}

@helper RenderTitle()
{
	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	string title = !hideTitle ? Model.Item.GetString("Title", string.Empty) : string.Empty;

	if (!string.IsNullOrEmpty(title))
	{
		string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? "mw-75ch d-inline-block" : string.Empty;
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");

		<h2 class="@titleFontSize mb-0">
			<span class="@maxWidth">@title</span>
		</h2>
	}
}

@helper RenderText()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? "mw-75ch d-inline-block" : string.Empty;
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="@subtitleFontSize lead mb-0">
			<span class="@maxWidth">@Model.Item.GetString("Text")</span>
		</p>
	}
}

@helper RenderButtons(Dynamicweb.Frontend.LinkViewModel link, Dynamicweb.Frontend.LinkViewModel link2)
{
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (link != null && !string.IsNullOrEmpty(link.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
	{
		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
		buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
		string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "secondary");
		buttonStyle2 = buttonStyle2 == "primary" ? " btn-primary" : buttonStyle2;
		buttonStyle2 = buttonStyle2 == "secondary" ? " btn-secondary" : buttonStyle2;
		string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
		string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
		string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
		string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
		string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
		string stretchedLinkClass = stretchedLink == "column-clickable" && string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel2) ? " stretched-link" : string.Empty;
		string stretchedLinkClass2 = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link.Url) && string.IsNullOrEmpty(buttonLabel) ? " stretched-link" : string.Empty;
		string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
		buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
		buttonSize = buttonSize == "regular" ? string.Empty : buttonSize;
		buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
		string alignmentClass = string.Empty;

		switch (Model.Item.GetString("Layout"))
		{
			case "align-top-left-text-left":
				alignmentClass = " justify-content-start";
				break;
			case "align-top-center-text-center":
				alignmentClass = " justify-content-center";
				break;
			case "align-top-right-text-right":
				alignmentClass = " justify-content-end";
				break;
			case "align-middle-left-text-left":
				alignmentClass = " justify-content-start";
				break;
			case "align-middle-center-text-center":
				alignmentClass = " justify-content-center";
				break;
			case "align-middle-right-text-right":
				alignmentClass = " justify-content-end";
				break;
			case "align-bottom-left-text-left":
				alignmentClass = " justify-content-start";
				break;
			case "align-bottom-center-text-center":
				alignmentClass = " justify-content-center";
				break;
			case "align-bottom-right-text-right":
				alignmentClass = " justify-content-end";
				break;
		}

		<div class="d-flex flex-wrap gap-3@(alignmentClass)">

			@if (link != null && !string.IsNullOrEmpty(link.Url))
			{
				if (!string.IsNullOrEmpty(buttonLabel))
				{
					<a href="@link.Url" @target class="text-nowrap btn@(buttonStyle)@(buttonSize)@(stretchedLinkClass)">@buttonLabel</a>
				}
				else
				{
					<a href="@link.Url" @target class="@(stretchedLinkClass)">
						<span class="visually-hidden">@Model.Item.GetString("Title")</span>
					</a>
				}
			}

			@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				if (!string.IsNullOrEmpty(buttonLabel2))
				{
					<a href="@link2.Url" @target class="text-nowrap btn@(buttonStyle2)@(buttonSize)@(stretchedLinkClass2)">@buttonLabel2</a>
				}
				else
				{
					<a href="@link2.Url" @target class="@(stretchedLinkClass)">
						<span class="visually-hidden">@Model.Item.GetString("Title")</span>
					</a>
				}
			}
		</div>
	}
}

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
