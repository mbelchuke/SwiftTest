@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.Products
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.IO

@{ 
	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 3;

	var navigationViewModel = Navigation.GetNavigationViewModel(navigationSettings);
}

@if (navigationViewModel.Nodes.Count() > 0) {
	string content = GetNodes(navigationViewModel.Nodes).ToString();

	if (!string.IsNullOrEmpty(content)) { 
		@content
	} else if (Pageview.IsVisualEditorMode) { 
		<div class="alert alert-dark m-0" role="alert">
			<span><i class="fas fa-info-circle mr-3"></i></span> <span>@Translate("Group list: The selected groups will be shown here, if any")</span>
		</div>
	}
} else if (Pageview.IsVisualEditorMode) {
    <div class="alert alert-dark m-0" role="alert">
        <span><i class="fas fa-info-circle mr-3"></i></span> <span>@Translate("Group list: The selected groups will be shown here, if any")</span>
    </div>
}

@helper GetNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
    foreach (var node in nodes)
    {
        if (node.IsActive) {
            if (node.Nodes.Count() > 0)
            {
                @RenderNodes(node.Nodes)
            }
        } else {
            if (node.Nodes.Count() > 0)
            {
                @GetNodes(node.Nodes)
            }
        }
    }
}

@helper RenderNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes) { 
    string layout = Model.Item.GetRawValueString("Layout", "text-bottom");

    string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
    string groupTheme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("GroupTheme")) ? " theme " + Model.Item.GetRawValueString("GroupTheme").Replace(" ", "").Trim().ToLower() : "";
    
    string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
    ratio = ratio != "0" ? ratio : string.Empty;
	string ratioCssClass = ratio != string.Empty ? " ratio" : string.Empty;
	string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;

	int groupsCount = 0;

	foreach (var node in nodes) {
		IList<FieldValueViewModel> groupFields = node.GetProductGroup().GroupFields;

		if (groupFields != null) {
			foreach (FieldValueViewModel field in groupFields) {
				if (field.SystemName == "SelectedGroup" && !string.IsNullOrEmpty(field.Value.ToString())) {
					if (Convert.ToBoolean(field.Value.ToString())) {
						groupsCount++;
					}
				}
			}
		}
	}

	if (groupsCount != 0)
	{
		if (layout != "pill-button")
		{
			<nav class="swiffy-slider slider-item-reveal slider-nav-round slider-item-nosnap swiffy-gap-lg-3 slider-item-show6 my-3 my-lg-4 @theme" style="--swiffy-slider-item-count: 10;" aria-label="@Translate("Product groups")">
				<ul class="slider-container slider-nav-scrollbar">
					@foreach (var node in nodes)
					{

						string groupImage = "";
						var group = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(node.GroupId);
						IList<FieldValueViewModel> groupFields = node.GetProductGroup().GroupFields;

						if (!string.IsNullOrEmpty(node.GroupId))
						{
							groupImage = !string.IsNullOrEmpty(group.LargeImage) ? "/Files" + group.LargeImage : groupImage;
						}

						bool showGroup = false;
						if (groupFields != null)
						{
							foreach (FieldValueViewModel field in groupFields)
							{
								if (field.SystemName == "SelectedGroup" && !string.IsNullOrEmpty(field.Value.ToString()))
								{
									if (Convert.ToBoolean(field.Value.ToString()))
									{
										showGroup = true;
									}
								}
							}
						}

						if (showGroup)
						{
							<li class="d-flex flex-column gap-2 @groupTheme">
								<a href="@node.Link" tabindex="-1" class="text-decoration-none position-relative">
									@if (layout == "text-bottom")
									{
										if (!string.IsNullOrWhiteSpace(groupImage))
										{
											<figure class="overflow-hidden m-0 mx-auto @ratioCssClass" @ratioVariable>
												<img loading="lazy" src="/Admin/Public/GetImage.ashx?width=640&crop=0&image=@groupImage" class="image-zoom-2-hover" style="object-fit: cover" alt="">
											</figure>
										}

										<div class="fs-7 text-center p-2">
											@node.Name
										</div>
									}
									@if (layout == "poster")
									{
										<div class="position-absolute h-100 w-100" style="z-index: 1">
											<div class="h-100 grid grid-1 h5 text-center justify-content-center align-items-center shadow" @ratioVariable>
												 @node.Name
											</div>
										</div>

										if (!string.IsNullOrWhiteSpace(groupImage))
										{
											<div class="position-relative">
												<figure class="overflow-hidden m-0@(ratioCssClass)" @ratioVariable>
												   <img loading="lazy" src="/Admin/Public/GetImage.ashx?width=640&crop=0&image=@groupImage" class="image-zoom-2-hover" style="object-fit: cover" alt="">
												</figure>
											</div>
										}
									}
									@if (layout == "ball")
									{
										if (!string.IsNullOrWhiteSpace(groupImage))
										{
											<figure class="overflow-hidden m-0 mx-auto rounded-pill @ratioCssClass" @ratioVariable>
												<img loading="lazy" src="/Admin/Public/GetImage.ashx?width=640&crop=0&image=@groupImage" class="image-zoom-2-hover" style="object-fit: cover" alt="">
											</figure>
										}

										<div class="fs-7 text-center p-2">
											@node.Name
										</div>
									}
								</a>
							</li>
						}
					}
				</ul>

				<script type="module" src="~/Files/Templates/Designs/Swift/Assets/js/swiffy-slider.js"></script>
				<script type="module">
					swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/swiffy-slider.min.css', 'css');
					document.addEventListener('load.swift.assetloader', function () {
						swiffyslider.init()
					});
				</script>
			</nav>
		}
		else
		{
			<nav class="my-3 my-lg-4 @theme overflow-hidden" aria-label="@Translate("Product groups")">
				<div class="d-flex gap-3 align-items-center overflow-x-scroll pb-3 mb-n3">
					@foreach (var node in nodes)
					{
						string groupImage = "";
						IList<FieldValueViewModel> groupFields = node.GetProductGroup().GroupFields;

						if (layout == "pill-button" && groupFields != null)
						{
							foreach (FieldValueViewModel field in groupFields)
							{
								if (field.SystemName == "ProductGroupNavigationImage" && !string.IsNullOrEmpty(field.Value.ToString()))
								{
									groupImage = "/Files/Images/" + field.Value.ToString();
								}
							}
						}

						bool showGroup = false;
						if (groupFields != null)
						{
							foreach (FieldValueViewModel field in groupFields)
							{
								if (field.SystemName == "SelectedGroup" && !string.IsNullOrEmpty(field.Value.ToString()))
								{
									if (Convert.ToBoolean(field.Value.ToString()))
									{
										showGroup = true;
									}
								}
							}
						}

						if (showGroup)
						{
							<div class="@groupTheme">
								<a href="@node.Link" tabindex="-1" class="text-decoration-none btn btn-secondary rounded-pill shadow-none">
									<div class="d-flex flex-row align-items-center">
										@if (!string.IsNullOrWhiteSpace(groupImage))
										{
											if (Path.GetExtension(groupImage).ToLower() == ".svg")
											{
												<div class="icon-3 me-1" style="width: 35px">
													@ReadFile(groupImage)
												</div>
											}
											else
											{
												<div class="p-1 me-1" style="width: 35px">
													<div class="mx-auto @ratioCssClass" @ratioVariable>
    													<img loading="lazy" src="/Admin/Public/GetImage.ashx?width=35&crop=0&image=@groupImage" style="object-fit: cover" alt="" >
													</div>
												</div>
											}
										}
										<div class="fs-7 text-center text-nowrap m-0 px-2">
											@node.Name
										</div>
									</div>
								</a>
							</div>
						}
					}
				</div>
			</nav>
		}
	}
}


