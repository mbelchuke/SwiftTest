@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using System.Web
@using Dynamicweb.Frontend

@{
	bool movePageBehind = false;
	bool isFirstPoster = false;
	string movePageBehindClass = "";
	if (Pageview.Page.PropertyItem != null)
	{
		string headerCssClass = Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"] != null ? Pageview.Page.PropertyItem["MoveThisPageBehindTheHeader"].ToString() : "sticky-top";
		movePageBehind = headerCssClass == "fixed-top" && !Pageview.IsVisualEditorMode ? true : false;
		if (movePageBehind)
		{
			movePageBehindClass = " poster-behind";
			if (!Dynamicweb.Context.Current.Items.Contains("firstPosterIsRendered"))
			{
				isFirstPoster = true;
				Dynamicweb.Context.Current.Items.Add("firstPosterIsRendered", true);
			}
		}
	}

	var uniqueId = Pageview.CurrentParagraph.ID.ToString();
	string title = Model.Item.GetString("Title");
	var carouselItems = Model.Item?.GetItems("Carousel_Items") ?? Enumerable.Empty<Dynamicweb.Frontend.ItemViewModel>().ToList();
	string enableControls = Model.Item.GetBoolean("EnableControls").ToString().ToLower();
	string enableIndcators = Model.Item.GetBoolean("EnableIndicators").ToString().ToLower();
	bool autoplay = Model.Item.GetBoolean("Autoplay");
	string interval = (autoplay) ? Model.Item.GetString("Interval", "5000") : "0";
	string enableAutoplay = autoplay.ToString().ToLower();
	string animation = Model.Item.GetRawValueString("Animation", "carousel");
	string carouselHeight = Model.Item.GetRawValueString("CarouselHeight", "h-100 min-vh-75 min-vh-md-100");
	carouselHeight = carouselHeight == "small" ? "min-vh-25 min-vh-md-50" : carouselHeight;
	carouselHeight = carouselHeight == "medium" ? "min-vh-50 min-vh-md-75" : carouselHeight;
	carouselHeight = carouselHeight == "large" ? "min-vh-75 min-vh-md-100" : carouselHeight;
	string buttonSize = Model.Item.GetRawValueString("buttonSize", "regular");
	buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
	buttonSize = buttonSize == "regular" ? "" : buttonSize;
	buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
	string carouselPadding = Model.Item.GetRawValueString("ContentPadding", "");
	carouselPadding = carouselPadding == "none" ? "p-3 px-xl-3 py-xl-4" : carouselPadding;
	carouselPadding = carouselPadding == "small" ? "p-3 p-xl-4" : carouselPadding;
	carouselPadding = carouselPadding == "large" ? "p-4 p-xl-5" : carouselPadding;
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-1");
	string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");
}

<div id="carousel_@uniqueId" class="js-slider item_@Model.Item.SystemName.ToLower()">

	@{
		bool isFirst = true;
	}

	@foreach (var item in carouselItems)
	{
		@RenderItem(item, isFirst, carouselHeight, carouselPadding, buttonSize, titleFontSize, subtitleFontSize, movePageBehindClass)

		isFirst = false;
	}

</div>

@helper RenderItem(ItemViewModel item, bool isFirst, string carouselHeight, string carouselPadding, string buttonSize, string titleFontSize, string subtitleFontSize, string movePageBehindClass)
{
	string layout = item.GetRawValueString("Layout", "align-middle-center-text-center");
	string carouselWidth = "container-xl";
	int xPos = item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
	int yPos = item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
	string theme = !string.IsNullOrWhiteSpace(item.GetRawValueString("Theme")) ? " theme " + item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
	string active = isFirst ? "active" : "";
	string alignment = "";
	string maxWidth = item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? "mw-75ch d-inline-block" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	<div class="@(active)">
		<div class="position-relative h-100@(theme)@(movePageBehindClass)">
			@RenderImage(item)

			@switch (layout)
			{
				case "align-top-left-text-left":
					alignment = "text-start justify-content-start align-items-start";
					break;
				case "align-top-center-text-center":
					alignment = "text-center justify-content-start align-items-start";
					break;
				case "align-top-right-text-right":
					alignment = "text-end justify-content-start align-items-start";
					break;
				case "align-middle-left-text-left":
					alignment = "text-start justify-content-center align-items-center";
					break;
				case "align-middle-center-text-center":
					alignment = "text-center justify-content-center align-items-center";
					break;
				case "align-middle-right-text-right":
					alignment = "text-end justify-content-center align-items-center";
					break;
				case "align-bottom-left-text-left":
					alignment = "text-start justify-content-end align-items-end";
					break;
				case "align-bottom-center-text-center":
					alignment = "text-center justify-content-end align-items-end";
					break;
				case "align-bottom-right-text-right":
					alignment = "text-end justify-content-end align-items-end";
					break;
			}
			<div class="position-relative h-100">
				<div class="h-100 grid grid-1 @(carouselWidth) @carouselPadding @(alignment) @(carouselHeight)">
					<div class="grid grid-1 gap-3 gap-md-4">
						@RenderTitle(item, titleFontSize, maxWidth)
						@RenderText(item, subtitleFontSize, maxWidth)
						@RenderButton(item, buttonSize)
					</div>
				</div>
			</div>
		</div>
	</div>
}

@helper RenderImage(ItemViewModel item)
{
	if (!string.IsNullOrEmpty(item.GetString("Image")))
	{
		var parms = new Dictionary<string, object>();
		parms.Add("cssClass", "h-100 w-100");
		parms.Add("columns", Model.GridRowColumnCount);

		string imageFilter = item.GetRawValueString("ImageFilter", "");
		imageFilter = imageFilter == "no-filter" ? "" : imageFilter;
		imageFilter = imageFilter == "filter" ? " image-filter" : imageFilter;

		<div class="position-absolute top-0 bottom-0 end-0 start-0@(imageFilter)">
			@RenderPartial("Components/Image.cshtml", item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
		</div>
	}
}

@helper RenderTitle(ItemViewModel item, string titleFontSize, string maxWidth)
{
	if (!string.IsNullOrEmpty(item.GetString("Title")) && !item.GetBoolean("HideTitle"))
	{
		<h2 class="@titleFontSize m-0">
			<span class="@maxWidth">@item.GetString("Title")</span>
		</h2>
	}
}

@helper RenderText(ItemViewModel item, string subtitleFontSize, string maxWidth)
{
	if (!string.IsNullOrEmpty(item.GetString("Text")))
	{
		<p class="@subtitleFontSize lead m-0">
			<span class="@maxWidth">@item.GetString("Text")</span>
		</p>
	}
}

@helper RenderButton(ItemViewModel item, string buttonSize)
{
	string linkType = item.GetRawValueString("LinkType", "page");
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	string StretchedLink = item.GetRawValueString("StretchedLink", "");
	StretchedLink = StretchedLink == "item-not-clickable" ? "" : StretchedLink;
	StretchedLink = StretchedLink == "item-clickable" ? " stretched-link" : StretchedLink;

	if (linkType == "page" && item.GetLink("ButtonLink") != null)
	{
		link = item.GetLink("ButtonLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (link != null && !string.IsNullOrEmpty(item.GetString("ButtonLabel")))
	{
		string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
		string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

		string buttonStyle = item.GetRawValueString("ButtonStyle", "primary");
		buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;

		<div class="m-0">
			<a href="@link.Url" class="btn @buttonStyle@(buttonSize)@(StretchedLink)" @target @rel>@item.GetString("ButtonLabel")</a>
		</div>
	}
	else if (link != null && !string.IsNullOrEmpty(link.Url))
	{
		string target = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "target=\"_blank\"" : "";
		string rel = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link.IsExternal ? "rel=\"noopener\"" : "";

		<a href="@link.Url" @target @rel class="@StretchedLink">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}

<script type="module" src="~/Files/Templates/Designs/Swift/Assets/js/tiny-slider.js"></script>
<script type="module">
	swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/tiny-slider.css', 'css');
	document.addEventListener('load.swift.assetloader', function () {
		var slider = tns({
			container: "#carousel_@uniqueId",
			controls: false,
			nav: false,
			autoplay: @enableAutoplay,
			autoplayTimeout: @interval,
			autoplayHoverPause: true,
			autoplayButtonOutput: false,
			items: 1,
			loop: @enableAutoplay,
			mode: "@animation",
			rewind: false,
			arrowKeys: false,
			lazyload: true,
			swipeAngle: 30,
			mouseDrag: true,
			preventScrollOnTouch: 'auto',
			responsive: {
				992: {
					controls: @enableControls,
					mouseDrag: false,
					controlsText: [
						'<span class="tns-controls-icon" style="height:3em; width: 3em;"><span class="visually-hidden">Previous</span><span class="icon-3"><svg viewBox="0 0 16 16" class="bi bi-arrow-left" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/></svg></span></span>',
						'<span class="tns-controls-icon" style="height:3em; width: 3em;"><span class="visually-hidden">Next</span><span class="icon-3"><svg viewBox="0 0 16 16" class="bi bi-arrow-right" fill="currentColor" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/></svg></span></span>'
					],
				}
			}
		});
	});
</script>

@if (movePageBehind && isFirstPoster)
{
	<script>
		['resize', 'load'].forEach(function (e) {
			window.addEventListener(e, () => swift.Scroll.setContentPosition());
		});
	</script>
}
