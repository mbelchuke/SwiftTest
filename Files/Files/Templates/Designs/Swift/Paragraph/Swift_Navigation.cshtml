@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation

@{ string navAlignment = Model.Item.GetRawValueString("navAlignment", "justify-content-start text-start");
	navAlignment = navAlignment == "start" ? "start" : navAlignment;
	navAlignment = navAlignment == "center" ? "center" : navAlignment;
	navAlignment = navAlignment == "end" ? "end" : navAlignment;

	string navOrientation = Model.Item.GetRawValueString("navOrientation", "flex-row");
	navOrientation = navOrientation == "horizontal" ? "flex-row" : navOrientation;
	navOrientation = navOrientation == "vertical" ? "flex-column" : navOrientation;

	if (navOrientation == "flex-row")
	{
		if (navAlignment == "start")
		{
			navAlignment = "justify-content-start text-start";
		}
		if (navAlignment == "center")
		{
			navAlignment = "justify-content-center text-center";
		}
		if (navAlignment == "end")
		{
			navAlignment = "justify-content-end text-end";
		}
	}
	if (navOrientation == "flex-column")
	{
		if (navAlignment == "start")
		{
			navAlignment = "align-items-start text-start";
		}
		if (navAlignment == "center")
		{
			navAlignment = "align-items-center text-center";
		}
		if (navAlignment == "end")
		{
			navAlignment = "align-items-end text-end";
		}
	}

	string layout = Model.Item.GetRawValueString("Layout", "linksOnly");

	string linkFontWeight = Model.Item.GetRawValueString("LinkFontWeight", "fw-normal");
	linkFontWeight = linkFontWeight == "light" ? "fw-light" : linkFontWeight;
	linkFontWeight = linkFontWeight == "normal" ? "fw-normal" : linkFontWeight;
	linkFontWeight = linkFontWeight == "bold" ? "fw-bold" : linkFontWeight;

	string navTitleFontWeight = Model.Item.GetRawValueString("navTitleFontWeight", "fw-bold");
	navTitleFontWeight = navTitleFontWeight == "light" ? "fw-light" : navTitleFontWeight;
	navTitleFontWeight = navTitleFontWeight == "normal" ? "fw-normal" : navTitleFontWeight;
	navTitleFontWeight = navTitleFontWeight == "bold" ? "fw-bold" : navTitleFontWeight;

	string NavTitleCasing = Model.Item.GetRawValueString("NavTitleCasing", "text-capitalize");
	NavTitleCasing = NavTitleCasing == "regular" ? "text-capitalize" : NavTitleCasing;
	NavTitleCasing = NavTitleCasing == "uppercase" ? "text-uppercase" : NavTitleCasing;
	NavTitleCasing = NavTitleCasing == "lowercase" ? "text-lowercase" : NavTitleCasing;

	string linkCasing = Model.Item.GetRawValueString("LinkCasing", "");
	linkCasing = linkCasing == "regular" ? "" : linkCasing;
	linkCasing = linkCasing == "uppercase" ? "text-uppercase" : linkCasing;
	linkCasing = linkCasing == "lowercase" ? "text-lowercase" : linkCasing;

	string linkFontSize = Model.Item.GetRawValueString("LinkFontSize", "fs-6");
	linkFontSize = linkFontSize == "small" ? "fs-7" : linkFontSize;
	linkFontSize = linkFontSize == "regular" ? "fs-6" : linkFontSize;
	linkFontSize = linkFontSize == "large" ? "fs-5" : linkFontSize;

	string navTitleFontSize = Model.Item.GetRawValueString("NavTitleFontSize", "h6");
	navTitleFontSize = navTitleFontSize == "regular" ? "h6" : navTitleFontSize;
	navTitleFontSize = navTitleFontSize == "large" ? "h4" : navTitleFontSize;

	string negativMargin = "mx-n3";

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 1;
	navigationSettings.StopLevel = 10;
	navigationSettings.ExpandMode = ExpandMode.All;

	navigationSettings.Parameters.Add("Layout", layout);
	navigationSettings.Parameters.Add("LinkFontSize", linkFontSize);
	navigationSettings.Parameters.Add("mx-n3", negativMargin);
	navigationSettings.Parameters.Add("navOrientation", navOrientation);
	navigationSettings.Parameters.Add("LinkFontWeight", linkFontWeight);
	navigationSettings.Parameters.Add("navAlignment", navAlignment);
	navigationSettings.Parameters.Add("LinkCasing", linkCasing);
	navigationSettings.Parameters.Add("theme", theme);
	navigationSettings.Parameters.Add("ShowOnlyFirstNavLevel", Model.Item.GetBoolean("ShowOnlyFirstNavLevel"));
	if (!string.IsNullOrEmpty(Model.Item.GetString("NavigationRoot")))
	{
		string root = Model.Item.GetString("NavigationRoot");

		if (root.Contains("="))
		{
			int rootPageId = Convert.ToInt32(root.Substring(root.LastIndexOf('=') + 1));
			navigationSettings.RootPageId = rootPageId;
		}
	}
}

@if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
{
	<div class="d-flex px-3 pb-2 @(negativMargin) @(navOrientation) @(navAlignment)">
		<h3 class="m-0 @(navTitleFontSize) @(navTitleFontWeight) @(NavTitleCasing)">@Model.Item.GetString("Title")</h3>
	</div>
}

@Navigation.RenderNavigation("Navigation/Navigation.cshtml", navigationSettings)
