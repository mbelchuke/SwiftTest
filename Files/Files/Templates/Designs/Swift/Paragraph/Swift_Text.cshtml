@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string layout = Model.Item.GetRawValueString("Layout", "text-start");
	layout = layout == "alignLeft" ? "align-items-start text-start" : layout;
	layout = layout == "alignCenter" ? "align-items-center text-center" : layout;
	layout = layout == "alignRight" ? "align-items-end text-end" : layout;
	layout = layout == "alignLeftMiddle" ? "align-items-start text-start justify-content-center" : layout;

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-3 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-5 p-md-5" : contentPadding;

	//Backward compatibility (Vertical align)
	string verticalAlign = "";
	if (!string.IsNullOrEmpty(Model.Item.GetString("verticalAlign"))) {
		verticalAlign = verticalAlign == "vertical-align-top" ? "justify-content-start" : verticalAlign;
		verticalAlign = verticalAlign == "vertical-align-center" ? "justify-content-center" : verticalAlign;
		verticalAlign = verticalAlign == "vertical-align-bottom" ? "justify-content-end" : verticalAlign;
    }

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="h-100 position-relative d-flex flex-column mb-0-last-child @contentPadding @verticalAlign @(layout)@(theme) item_@Model.Item.SystemName.ToLower()">
	@RenderBody(maxWidth)
</div>

@helper RenderBody(string maxWidth)
{
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	string StretchedLink = Model.Item.GetRawValueString("StretchedLink", "");
	StretchedLink = StretchedLink == "column-not-clickable" ? "" : StretchedLink;
	StretchedLink = StretchedLink == "column-clickable" ? " stretched-link" : StretchedLink;

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link = Model.Item.GetLink("ButtonLink");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds)
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds)
		};
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) && !Model.Item.GetBoolean("HideTitle"))
	{
		string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "h3");

		<h3 class="@titleFontSize mb-3@(maxWidth)">
			@Model.Item.GetString("Title")
		</h3>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="@subtitleFontSize lead mb-3@(maxWidth)">
			@Model.Item.GetString("Lead")
		</p>
	}

	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		<div class="mb-0-last-child@(maxWidth)">
			@Model.Item.GetString("Text")
		</div>
	}

	if (link != null && !string.IsNullOrEmpty(Model.Item.GetString("ButtonLabel")))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";
		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "");
		buttonStyle = buttonStyle == "primary" ? "btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? "btn-secondary" : buttonStyle;

		<div class="mt-3">
			<a href="@link.Url" @target class="btn @(buttonStyle)@(StretchedLink)">@Model.Item.GetString("ButtonLabel")</a>
		</div>
	}
	else if (link != null && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : "";

		<a href="@link.Url" @target class="@StretchedLink">
			<span class="visually-hidden">@Model.Item.GetString("Title")</span>
		</a>
	}
}
