@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment

@{
	ProductListViewModel productList = new ProductListViewModel();

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}

	string searchParameter = Dynamicweb.Context.Current.Request.GetString("q");	

	bool hideTitle = Model.Item.GetBoolean("HideGroupTitle");
	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 2;
	navigationSettings.ExpandMode = ExpandMode.Path;
	navigationSettings.Parameters.Add("HideBreadcrumb", true);
	navigationSettings.Parameters.Add("TitleFontSize", titleFontSize);

	string breadcrumbContent = Navigation.RenderNavigation("Navigation/ProductGroupHeader.cshtml", navigationSettings);
	breadcrumbContent = searchParameter != "" ? "<h1 class=\"" + titleFontSize + "\">" + Translate("Search results for") + ": " + searchParameter + "</h1>" : breadcrumbContent;

	bool hideDescription = Model.Item.GetBoolean("HideGroupDescription");
	string groupDescription = productList?.Group?.Description != null ? productList.Group.Description : "";
	string descriptionFontSize = Model.Item.GetRawValueString("DescriptionFontSize", "fs-6");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string maxWidth = Model.Item.GetRawValueString("TextReadability", "max-width-on");
	maxWidth = maxWidth == "max-width-on" ? " mw-75ch" : maxWidth;
	maxWidth = maxWidth == "max-width-off" ? "" : maxWidth;

	string layout = Model.Item.GetRawValueString("Layout", "text-start");
	string autoMargin = layout == "text-start" ? "my-auto" : "m-auto";
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

@if ((!string.IsNullOrEmpty(breadcrumbContent) && !hideTitle) || !string.IsNullOrEmpty(groupDescription)) {
	<div class="h-100 @(contentPadding)@(theme) item_@Model.Item.SystemName.ToLower()">
		<div class="@(layout) @(maxWidth) w-100 @autoMargin">
			@if (!hideTitle) {
				@breadcrumbContent
			}

			@if (!hideDescription && !string.IsNullOrEmpty(groupDescription)) {
				<div class="@descriptionFontSize">
					@groupDescription
				</div>
			}
		</div>
	</div>
} else if (Pageview.IsVisualEditorMode) {
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product list info: The info paragraph will be shown here, if any")</span>
	</div>
}
