@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment
@using Dynamicweb.Frontend

@{
	ProductListViewModel productList = new ProductListViewModel();

	ProductListViewModelSettings productSetting = new ProductListViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}
	else if (Pageview.Item["DummyProductGroup"] != null)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel groupList = pageViewModel.Item.GetValue("DummyProductGroup") != null ? pageViewModel.Item.GetValue("DummyProductGroup") as ProductListViewModel : new ProductListViewModel();

		if (groupList?.Group?.Id != null)
		{
			productList = ViewModelFactory.CreateView(productSetting, groupList.Group.Id);
			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
		else
		{
			productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);
			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
	}
	else if (Pageview.Item["DummyProductGroup"] == null)
	{
		productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);
		Dynamicweb.Context.Current.Items.Add("ProductList", productList);
	}

	string groupImage = productList?.Group?.Assets != null ? productList.Group.Assets.FirstOrDefault(x => x.Name == "LargeImage").Value : "";
	string groupName = productList?.Group?.Name != null ? productList.Group.Name : "";

	string ratio = Model.Item.GetRawValueString("ImageAspectRatio", "");
	ratio = ratio != "0" ? ratio : "";
	string ratioCssClass = ratio != "" && ratio != "fill" ? " ratio" : "";
	string ratioVariable = ratio != "" ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : "";
	string fillClass = ratio == "fill" ? " h-100" : "";

	var parms = new Dictionary<string, object>();
	parms.Add("loading", "lazy");
	parms.Add("columns", Model.GridRowColumnCount);

	if (ratio == "fill") {
		parms.Add("cssClass", "w-100 h-100");
	}
	else
	{
		parms.Add("cssClass", "mw-100 mh-100");
	}

	parms.Add("style", "");
	parms.Add("alt", groupName);
}

@if (!string.IsNullOrEmpty(groupImage)) {
	<div class="item_@Model.Item.SystemName.ToLower()">
		<figure class="m-0@(ratioCssClass)@(fillClass)" @ratioVariable>
			@RenderPartial("Components/Image.cshtml", new FileViewModel { Path = groupImage }, parms)
		</figure>
	</div>
} else if (Pageview.IsVisualEditorMode) {
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product list group image: The image will be shown here, if any")</span>
	</div>
}
