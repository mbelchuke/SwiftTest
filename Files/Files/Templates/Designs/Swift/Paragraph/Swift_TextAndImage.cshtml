@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	Dynamicweb.Frontend.LinkViewModel link1 = new Dynamicweb.Frontend.LinkViewModel();
	Dynamicweb.Frontend.LinkViewModel link2 = new Dynamicweb.Frontend.LinkViewModel();

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string layout = Model.Item.GetRawValueString("Layout", "image-top");
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", string.Empty);
	string contentPaddingClass = string.Empty;
	string gapClass = " gap-3";

	switch (contentPadding)
	{
		case "small":
			contentPaddingClass = " p-3";
			gapClass = " gap-0";
			break;
		case "large":
			contentPaddingClass = " p-5";
			gapClass = " gap-0";
			break;
	}
}

<div class="d-flex flex-column@(gapClass) h-100 position-relative@(theme) item_@Model.Item.SystemName.ToLower()">
	@switch (layout)
	{
		case "image-top":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				@RenderImage()
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3 h-100@(contentPaddingClass)">
					@RenderTitle()
					@RenderLead()
					@RenderText()
					@RenderButtons(link1, link2)
				</div>
			}
			break;

		case "title-top":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")))
			{
				<div class="@(contentPaddingClass)">
					@RenderTitle()
				</div>
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				@RenderImage()
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@RenderLead()
					@RenderText()
					@RenderButtons(link1, link2)
				</div>
			}
			break;

		case "title-lead-top":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@RenderTitle()
					@RenderLead()
				</div>
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				@RenderImage()
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@RenderText()
					@RenderButtons(link1, link2)
				</div>
			}
			break;

		case "text-center":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				@RenderImage()
			}

			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3 align-items-center text-center h-100@(contentPaddingClass)">
					@RenderTitle()
					@RenderLead()
					@RenderText()
					@RenderButtons(link1, link2)
				</div>
			}
			break;

		case "image-bottom":
			if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Lead")) || !string.IsNullOrEmpty(Model.Item.GetString("Text")) || link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				<div class="d-flex flex-column gap-3@(contentPaddingClass)">
					@RenderTitle()
					@RenderLead()
					@RenderText()
					@RenderButtons(link1, link2)
				</div>
			}
			if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
			{
				@RenderImage()
			}
			break;
	}
</div>

@helper RenderTitle()
{
	bool hideTitle = Model.Item?.GetBoolean("HideTitle") ?? false;
	string title = !hideTitle ? Model.Item.GetString("Title", string.Empty) : string.Empty;

	if (!string.IsNullOrEmpty(title))
	{
		string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? " mw-75ch" : string.Empty;
		string titleFontSize = Model.Item.GetString("TitleFontSize", "h2");

		string headingLevel = Model.Item.GetString("HeadingLevel", "h2");
		string headingLevelStart = $"<{headingLevel} class=\"{titleFontSize} {maxWidth} m-0\">";
		string headingLevelStop = $"</{headingLevel}>";

		@headingLevelStart
			@title
		@headingLevelStop
	}
}

@helper RenderLead()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Lead")))
	{
		string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? " mw-75ch" : string.Empty;
		string subtitleFontSize = Model.Item.GetRawValueString("SubtitleFontSize", "fs-5");

		<p class="m-0 lead @(subtitleFontSize)@(maxWidth)">
			@Model.Item.GetString("Lead")
		</p>
	}
}

@helper RenderText()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Text")))
	{
		string maxWidth = Model.Item.GetRawValueString("TextReadability", string.Empty) == "max-width-on" ? " mw-75ch" : string.Empty;

		<div class="mb-0-last-child@(maxWidth)">
			@Model.Item.GetString("Text")
		</div>
	}
}

@helper RenderImage()
{
	if (!string.IsNullOrEmpty(Model.Item.GetString("Image")))
	{
		int xPos = Model.Item?.GetFile("Image")?.FocalPositionFromLeft ?? 50;
		int yPos = Model.Item?.GetFile("Image")?.FocalPositionFromTop ?? 50;
		string ratioCssClass = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "ratio" : string.Empty;
		string ratioVariable = Model.Item.GetRawValueString("ImageAspectRatio") != "0" && Model.Item.GetRawValueString("ImageAspectRatio") != "" ? "style=\"--bs-aspect-ratio: " + Model.Item.GetRawValueString("ImageAspectRatio") + "\"" : string.Empty;
		string imageAspect = Model.Item.GetRawValueString("ImageAspectRatio", string.Empty);
		string ImageObjectFit = Model.Item.GetRawValueString("ImageObjectFit", string.Empty);
		ImageObjectFit = ImageObjectFit == "cover" ? string.Empty : ImageObjectFit;
		ImageObjectFit = ImageObjectFit == "contain" ? "object-fit:contain" : ImageObjectFit;

		var parms = new Dictionary<string, object>();
		parms.Add("loading", "lazy");
		parms.Add("style", ImageObjectFit);
		parms.Add("alt", Model.Item.GetString("ImageAltText"));
		parms.Add("columns", Model.GridRowColumnCount);

		if (Model.Item.GetRawValueString("ImageAspectRatio") == "0")
		{
			parms.Add("fullwidth", true);
			parms.Add("cssClass", "img-fluid");

			if (Model.Item.GetString("Layout") == "text-center")
			{
				<figure class="d-flex flex-column align-items-center">
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
			else
			{
				<figure>
					@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
				</figure>
			}
		}
		else
		{
			<figure class="mb-0 @ratioCssClass" @ratioVariable>
				@RenderPartial("Components/Image.cshtml", Model.Item.GetFile("Image") ?? new Dynamicweb.Frontend.FileViewModel(), parms)
			</figure>

		}
	}
}

@helper RenderButtons(Dynamicweb.Frontend.LinkViewModel link1, Dynamicweb.Frontend.LinkViewModel link2)
{
	string linkType = Model.Item.GetRawValueString("LinkType", "page");
	string linkType2 = Model.Item.GetRawValueString("LinkType2", "page2");

	if (linkType == "page" && Model.Item.GetLink("ButtonLink") != null)
	{
		link1 = Model.Item.GetLink("ButtonLink");
	}

	if (linkType2 == "page2" && Model.Item.GetLink("ButtonLink2") != null)
	{
		link2 = Model.Item.GetLink("ButtonLink2");
	}

	if (linkType == "product-group")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType2 == "product-group2")
	{
		IList<ProductGroupViewModel> selectedGroups = Model.Item.GetValue<IList<ProductGroupViewModel>>("ProductGroupLink2");
		IList<string> groupIds = new List<string> { };

		if (selectedGroups != null)
		{
			foreach (var fromGroup in selectedGroups)
			{
				groupIds.Add(fromGroup.Id);
			}
		}

		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag("Shop") + "&GroupID=" + string.Join(",", groupIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link1 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (linkType == "product2")
	{
		ProductListViewModel products = Model.Item.GetValue<ProductListViewModel>("ProductLink2");
		IList<string> productIds = new List<string> { };

		if (products != null)
		{
			foreach (var product in products.Products)
			{
				productIds.Add(product.Id);
			}
		}

		string productParameter = productIds.Count == 1 ? "ProductID" : "MainProductId";
		string pageTag = productIds.Count == 1 ? "ProductDetailPage" : "Shop";
		link2 = new Dynamicweb.Frontend.LinkViewModel()
		{
			Url = "/Default.aspx?ID=" + GetPageIdByNavigationTag(pageTag) + "&" + productParameter + "=" + string.Join(",", productIds).Trim(),
			IsExternal = false
		};
	}

	if (link1 != null && !string.IsNullOrEmpty(link1.Url) || link2 != null && !string.IsNullOrEmpty(link2.Url))
	{
		string buttonStyle = Model.Item.GetRawValueString("ButtonStyle", "primary");
		buttonStyle = buttonStyle == "primary" ? " btn-primary" : buttonStyle;
		buttonStyle = buttonStyle == "secondary" ? " btn-secondary" : buttonStyle;
		string buttonStyle2 = Model.Item.GetRawValueString("ButtonStyle2", "secondary");
		buttonStyle2 = buttonStyle2 == "primary" ? " btn-primary" : buttonStyle2;
		buttonStyle2 = buttonStyle2 == "secondary" ? " btn-secondary" : buttonStyle2;
		string target1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "target=\"_blank\"" : string.Empty;
		string target2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "target=\"_blank\"" : string.Empty;
		string rel1 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link1.IsExternal ? "rel=\"noopener\"" : string.Empty;
		string rel2 = Pageview.AreaSettings.GetBoolean("OpenLinksInNewTab") && link2.IsExternal ? "rel=\"noopener\"" : string.Empty;
		string buttonLabel = Model.Item.GetString("ButtonLabel", string.Empty);
		string buttonLabel2 = Model.Item.GetString("ButtonLabel2", string.Empty);
		string stretchedLink = Model.Item.GetRawValueString("StretchedLink", "column-not-clickable");
		string stretchedLink2 = Model.Item.GetRawValueString("StretchedLink2", "column-not-clickable");
		string stretchedLinkClass = stretchedLink == "column-clickable" && string.IsNullOrEmpty(link2.Url) && string.IsNullOrEmpty(buttonLabel2) ? " stretched-link" : string.Empty;
		string stretchedLinkClass2 = stretchedLink2 == "column-clickable" && string.IsNullOrEmpty(link1.Url) && string.IsNullOrEmpty(buttonLabel) ? " stretched-link" : string.Empty;
		string buttonSize = Model.Item.GetRawValueString("ButtonSize", "regular");
		buttonSize = buttonSize == "small" ? " btn-sm" : buttonSize;
		buttonSize = buttonSize == "regular" ? string.Empty : buttonSize;
		buttonSize = buttonSize == "large" ? " btn-lg" : buttonSize;
		string alignmentClass = string.Empty;

		if (Model.Item.GetString("Layout") == "text-center")
		{
			alignmentClass = " justify-content-center";
		}

		<div class="d-flex flex-wrap gap-3@(alignmentClass)">

			@if (link1 != null && !string.IsNullOrEmpty(link1.Url))
			{
				if (!string.IsNullOrEmpty(buttonLabel))
				{
					<a href="@link1.Url" @target1 @rel1 class="text-nowrap btn@(buttonStyle)@(buttonSize)@(stretchedLinkClass)">@buttonLabel</a>
				}
				else
				{
					<a href="@link1.Url" @target1 @rel1 class="@(stretchedLinkClass)">
						<span class="visually-hidden">@Model.Item.GetString("Title")</span>
					</a>
				}
			}

			@if (link2 != null && !string.IsNullOrEmpty(link2.Url))
			{
				if (!string.IsNullOrEmpty(buttonLabel2))
				{
					<a href="@link2.Url" @target2 @rel2 class="text-nowrap btn@(buttonStyle2)@(buttonSize)@(stretchedLinkClass2)">@buttonLabel2</a>
				}
				else
				{
					<a href="@link2.Url" @target2 @rel2 class="@(stretchedLinkClass)">
						<span class="visually-hidden">@Model.Item.GetString("Title")</span>
					</a>
				}
			}
		</div>
	}
}
