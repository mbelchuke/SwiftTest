@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>

@{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string quote = Model.Item.GetRawValueString("Quote", string.Empty);
	string quoteAuthor = Model.Item.GetRawValueString("QuoteAuthor", string.Empty);
	string layout = Model.Item.GetRawValueString("Layout", "QuoteOnly");
	string fontSize = Model.Item.GetRawValueString("FontSize", "Regular");
	string fontSizeClass = " fs-6";
	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "None");
	string contentPaddingClass = string.Empty;
	string quoteIconSize = "icon-3";
	string borderLeftLayout = "style=\"border-left:0.375rem solid var(--swift-border-color);box-shadow: none;\"";
	string quoteIcon = "<svg viewBox=\"0 0 32 28\"><path d= \"M40.333,28,38,0H52L49.667,28Zm-18,0L20,0H34L31.667,28Z\" transform=\"translate(-20)\" fill=\"currentColor\"/></svg>";

	switch (contentPadding)
	{
		case "Small":
			contentPaddingClass = " p-3";
			break;
		case "Large":
			contentPaddingClass = " p-5";
			break;
	}

	switch (fontSize)
	{
		case "Small":
			fontSizeClass = " fs-7";
			quoteIconSize = "icon-2";
			break;
		case "Large":
			fontSizeClass = " fs-3";
			quoteIconSize = "icon-4";
			break;
	}
}

@if (layout == "QuoteOnly")
{
	<figure class="d-flex flex-column gap-3 h-100 m-0@(contentPaddingClass)@(theme)">
		<blockquote class="m-0 blockquote mb-0-last-child@(fontSizeClass)">
			@quote
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="d-flex gap-3 align-items-center m-0">
				@RenderQuoteAuthorImage()
				<div class="opacity-85 fs-7">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftBorder")
{
	<figure class="d-flex flex-column gap-3 h-100 m-0@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<blockquote class="m-0 blockquote mb-0-last-child@(fontSizeClass)">
			@quote
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			<figcaption class="d-flex gap-3 align-items-center m-0">
				@RenderQuoteAuthorImage()
				<div class="opacity-85 fs-7">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftBorderIconTop")
{
	<div class="d-flex flex-column gap-3 h-100@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<div class="@quoteIconSize">
			@quoteIcon
		</div>
		<figure class="d-flex flex-column gap-3 m-0">
			<blockquote class="m-0 blockquote mb-0-last-child@(fontSizeClass)">
				@quote
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="d-flex gap-3 align-items-center m-0">
					@RenderQuoteAuthorImage()
					<div class="opacity-85 fs-7">
						@quoteAuthor
						@RenderQuoteSource()
					</div>
				</figcaption>
			}
		</figure>
	</div>
}

@if (layout == "QuoteLeftBorderIconLeft")
{
	<div class="d-flex flex-row h-100 gap-3@(contentPaddingClass)@(theme)" @borderLeftLayout>
		<div class="@quoteIconSize mt-1">
			@quoteIcon
		</div>
		<figure class="d-flex flex-column gap-3 m-0">
			<blockquote class="m-0 blockquote mb-0-last-child@(fontSizeClass)">
				@quote
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="d-flex gap-3 align-items-center m-0">
					@RenderQuoteAuthorImage()
					<div class="opacity-85 fs-7">
						@quoteAuthor
						@RenderQuoteSource()
					</div>
				</figcaption>
			}
		</figure>
	</div>
}

@if (layout == "QuoteTopImageCenter")
{
	string blockquotePadding = " pb-5";
	string figcaptionPadding = " pt-4";

	switch (contentPadding)
	{
		case "Small":
			blockquotePadding = " px-3 pt-3 pb-5";
			figcaptionPadding = " px-3 pt-4 pb-3";
			break;
		case "Large":
			blockquotePadding = " p-5";
			figcaptionPadding = " px-5 py-4";
			break;
	}

	<figure class="d-flex flex-column h-100 m-0">
		<blockquote class="flex-grow-1 m-0 blockquote mb-0-last-child text-center@(fontSizeClass)@(blockquotePadding)@(theme)">
			@quote
		</blockquote>
		@if (!string.IsNullOrEmpty(quoteAuthor))
		{
			string quoteAuthorWrapperColor = theme != string.Empty ? "bg-white text-black " : string.Empty;

			<figcaption class="d-flex gap-3 justify-content-center text-center position-relative m-0@(figcaptionPadding)@theme" style="background-color:var(--swift-foreground-color);color:var(--swift-background-color);">
				@RenderQuoteAuthorImage()
				<div class="opacity-85 fs-7 pt-3">
					@quoteAuthor
					@RenderQuoteSource()
				</div>
			</figcaption>
		}
	</figure>
}

@if (layout == "QuoteLeftImageRight")
{

	<figure class="grid grid-12 gap-0 h-100 m-0">
		<div class="g-col-12 g-col-md-8 order-last order-md-first d-flex flex-column gap-3 h-100 align-items-start@(contentPaddingClass)@(theme)">
			<blockquote class="m-0 blockquote mb-0-last-child@(fontSizeClass)">
				@quote
			</blockquote>
			@if (!string.IsNullOrEmpty(quoteAuthor))
			{
				<figcaption class="opacity-85 fs-7">
					@quoteAuthor
					@RenderQuoteSource()
				</figcaption>
			}
		</div>
		@RenderQuoteAuthorImage()
	</figure>
}

@helper RenderQuoteAuthorImage()
{
	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : string.Empty;
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/";
	Dynamicweb.Frontend.FileViewModel image = Model.Item.GetFile("QuoteAuthorImage");
	string imagePath = image?.PathUrlEncoded ?? string.Empty;
	int xPos = image?.FocalPositionFromLeft ?? 50;
	int yPos = image?.FocalPositionFromTop ?? 50;
	string imagePosition = $"{xPos}% {yPos}%";
	int imageWidth = 32;
	int imageheight = 32;
	string imageClass = "rounded-circle";
	string imageStyle = "object-fit:cover;object-position:" + imagePosition + ";";

	if (Model.Item.GetRawValueString("Layout") == "QuoteTopImageCenter")
	{
		imageWidth = 68;
		imageheight = 68;
		imageClass += " position-absolute top-0 start-50 translate-middle";
	
		if (!string.IsNullOrEmpty(imagePath))
		{
			<img src="/Admin/Public/GetImage.ashx?image=@imagePath&width=@(imageWidth*2)&crop=0&format=webp&compression=75" width="@imageWidth" height="@imageheight" class="@imageClass" alt="@Model.Item.GetRawValueString("QuoteAuthor", string.Empty)" loading="lazy" decoding="async" style="@imageStyle" />
		}
		else
        {
			<div class="p-3 icon-4 shadow-none @imageClass@(theme)" style="background-color:var(--swift-foreground-color);color:var(--swift-background-color);border:2px solid var(--swift-background-color)">
				@ReadFile(iconPath + "user.svg")
			</div>
        }
	}

	else if (Model.Item.GetRawValueString("Layout") == "QuoteLeftImageRight")
	{
		imageWidth = 400;
		imageheight = 225;
		imageClass = "w-100 h-100";
		imageStyle += "aspect-ratio:16/9;";
		
		if (!string.IsNullOrEmpty(imagePath))
		{
			<div class="g-col-12 g-col-md-4 order-first order-md-last">
				<img src="/Admin/Public/GetImage.ashx?image=@imagePath&width=@(imageWidth*2)&crop=0&format=webp&compression=75" width="@imageWidth" height="@imageheight" class="@imageClass" alt="@Model.Item.GetRawValueString("QuoteAuthor", string.Empty)" loading="lazy" decoding="async" style="@imageStyle" />
			</div>		
		}
		else
        {
			<div class="g-col-12 g-col-md-4 order-first order-md-last h-100 w-100@(theme)" style="aspect-ratio: 16/9;background-color:var(--swift-foreground-color);color:var(--swift-background-color);">
				<div class="d-flex align-items-center justify-content-center icon-5 h-100">
					@ReadFile(iconPath + "user.svg")
				</div>
			</div>
        }
	}

	else
	{
		if (!string.IsNullOrEmpty(imagePath))
		{
			<img src="/Admin/Public/GetImage.ashx?image=@imagePath&width=@(imageWidth*2)&crop=0&format=webp&compression=75" width="@imageWidth" height="@imageheight" class="@imageClass" alt="@Model.Item.GetRawValueString("QuoteAuthor", string.Empty)" loading="lazy" decoding="async" style="@imageStyle;" />
		}
		else
        {
			<div class="p-2 icon-2 rounded-circle" style="background-color:var(--swift-foreground-color);color:var(--swift-background-color);">
				@ReadFile(iconPath + "user.svg")
			</div>
        }
	}
}

@helper RenderQuoteSource()
{
	string quoteSource = Model.Item.GetRawValueString("QuoteSource", string.Empty);
	Dynamicweb.Frontend.LinkViewModel link = new Dynamicweb.Frontend.LinkViewModel();

	if (Model.Item.GetLink("QuoteSourceLink") != null)
	{
		link = Model.Item.GetLink("QuoteSourceLink");
	}

	if (!string.IsNullOrEmpty(quoteSource) && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;

		<a class="text-decoration-none text-decoration-underline-hover" style="color:currentColor" href="@link.Url" @target>
			<cite title="@quoteSource">@quoteSource</cite>
		</a>
	}
	else if (string.IsNullOrEmpty(quoteSource) && !string.IsNullOrEmpty(link.Url))
	{
		string target = link.IsExternal ? "target=\"_blank\"" : string.Empty;
		<a class="stretched-link text-decoration-none text-decoration-underline-hover" href="@link.Url" @target>
			<cite title="@quoteSource">@quoteSource</cite>
		</a>
	}
	else
	{
		<cite title="@quoteSource">@quoteSource</cite>
	}
}
