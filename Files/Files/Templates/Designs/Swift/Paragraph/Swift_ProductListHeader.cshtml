@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend.Navigation
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Environment

@{
	string searchParameter = Dynamicweb.Context.Current.Request.GetString("q");

	ProductListViewModel productList = new ProductListViewModel();

	ProductListViewModelSettings productSetting = new ProductListViewModelSettings
	{
		LanguageId = Dynamicweb.Ecommerce.Common.Context.LanguageID,
		CurrencyCode = Dynamicweb.Ecommerce.Common.Context.Currency.Code,
		CountryCode = Dynamicweb.Ecommerce.Common.Context.Country.Code2,
		ShopId = Pageview.Area.EcomShopId
	};

	if (Dynamicweb.Context.Current.Items.Contains("ProductList"))
	{
		productList = (ProductListViewModel)Dynamicweb.Context.Current.Items["ProductList"];
	}
	else if (Pageview.Item["DummyProductGroup"] != null)
	{
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(Pageview.Page);
		ProductListViewModel groupList = pageViewModel.Item.GetValue("DummyProductGroup") != null ? pageViewModel.Item.GetValue("DummyProductGroup") as ProductListViewModel : new ProductListViewModel();

		if (groupList?.Group?.Id != null)
		{
			productList = ViewModelFactory.CreateView(productSetting, groupList.Group.Id);
			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
		else
		{
			productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);

			Dynamicweb.Context.Current.Items.Add("ProductList", productList);
		}
	}
	else if (Pageview.Item["DummyProductGroup"] == null)
	{
		productList = ViewModelFactory.CreateView(productSetting, Dynamicweb.Ecommerce.Services.ProductGroups.GetGroups(Dynamicweb.Ecommerce.Common.Context.LanguageID).FirstOrDefault().Id);
		Dynamicweb.Context.Current.Items.Add("ProductList", productList);
	}

	string titleFontSize = Model.Item.GetRawValueString("TitleFontSize", "display-4");

	var navigationSettings = new NavigationSettings();
	navigationSettings.StartLevel = 2;
	navigationSettings.ExpandMode = ExpandMode.Path;
	navigationSettings.Parameters.Add("TitleFontSize", titleFontSize);

	string breadcrumbContent = Navigation.RenderNavigation("Navigation/ProductGroupHeader.cshtml", navigationSettings);
	breadcrumbContent = searchParameter != "" ? "<h1 class=\"" + titleFontSize + "\">" + Translate("Search results for") + ": " + searchParameter + "</h1>" : breadcrumbContent;

	@* if we're on a search result page, set the search term as the Meta Title *@
	if (!string.IsNullOrEmpty(searchParameter))
	{
		Dynamicweb.Frontend.PageView.Current().Meta.Title = Translate("Search results for") + ": " + searchParameter;
	}

	string layout = Model.Item.GetRawValueString("Layout", "text-start");

	string contentPadding = Model.Item.GetRawValueString("ContentPadding", "");
	contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
	contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
	contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

	string theme = !string.IsNullOrWhiteSpace(Model.Item.GetRawValueString("Theme")) ? " theme " + Model.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "";
}

<div class="@(contentPadding)@(theme) item_@Model.Item.SystemName.ToLower()">
	@if (!string.IsNullOrEmpty(breadcrumbContent))
	{
		<div class="grid gap-0">
			@if (layout == "text-start") {
				<div class="g-col-12 g-col-lg-9">
					@breadcrumbContent
				</div>
				<div class="g-col-12 g-col-lg-3 text-lg-end mb-3 mb-lg-0">
					@productList.TotalProductsCount @Translate("products")
				</div>
			} else {
				<div class="g-col-12 text-center d-flex flex-column align-items-center">
					@breadcrumbContent
				</div>
				<div class="g-col-12 text-center mb-3">
					@productList.TotalProductsCount @Translate("products")
				</div>
			}
		</div>
	}
	else if (Pageview.IsVisualEditorMode)
	{
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("Product list header: The header will be shown here, if any")</span>
		</div>
	}
</div>
