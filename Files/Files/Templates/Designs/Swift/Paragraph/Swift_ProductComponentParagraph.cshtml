@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Ecommerce.CustomerExperienceCenter.Favorites

@{ 
	bool isVisualEditor = !string.IsNullOrEmpty(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) ? Convert.ToBoolean(Dynamicweb.Context.Current.Request.QueryString.Get("VisualEdit")) : false;
	int listItemSourcePageId = Convert.ToInt32(Model.Item.GetRawValueString("ComponentSource", "0"));
}

@if (listItemSourcePageId != 0) {
	var page = Dynamicweb.Services.Pages.GetPage(listItemSourcePageId);

	if (page != null) { 
		var pageViewModel = Dynamicweb.Frontend.ContentViewModelFactory.CreatePageInfoViewModel(page);
		string itemTheme = !string.IsNullOrWhiteSpace(pageViewModel.Item.GetRawValueString("Theme")) ? " theme " + pageViewModel.Item.GetRawValueString("Theme").Replace(" ", "").Trim().ToLower() : "theme light";

		string contentPadding = pageViewModel.Item.GetRawValueString("ContentPadding", "");
		contentPadding = contentPadding == "none" ? "p-0" : contentPadding;
		contentPadding = contentPadding == "small" ? "p-2 p-md-3" : contentPadding;
		contentPadding = contentPadding == "large" ? "p-4 p-md-5" : contentPadding;

		<div class="@contentPadding @itemTheme h-100 item_@Model.Item.SystemName.ToLower()">
			@RenderGrid(listItemSourcePageId)
		</div>
	} else if (Pageview.IsVisualEditorMode) { 
		<div class="alert alert-dark m-0" role="alert">
			<span>@Translate("The selected component does not exist anymore")</span>
		</div>
	}
} else if (Pageview.IsVisualEditorMode) { 
	<div class="alert alert-dark m-0" role="alert">
		<span>@Translate("Product component: The component will be shown here, if any")</span>
	</div>
}
