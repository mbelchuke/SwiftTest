@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.Navigation.NavigationTreeViewModel>
@using System.IO
@using System.Text.RegularExpressions
@using Dynamicweb
@using Dynamicweb.Ecommerce.ProductCatalog

@{
	string navType = Model?.Parameters["NavType"] != null ? Model.Parameters["NavType"].ToString() : "first-nav";
}

<div class="nav @navType flex-column h-auto w-100 left-0 top-0 offcanvas-navigation">
	@RenderNodes(Model.Nodes)
</div>

@helper RenderNodes(IEnumerable<Dynamicweb.Frontend.Navigation.NavigationTreeNodeViewModel> nodes)
{
	string groupId = Dynamicweb.Context.Current.Request["GroupID"] != null ? Dynamicweb.Context.Current.Request["GroupID"].ToString() : "";
	string productId = Dynamicweb.Context.Current.Request["ProductID"] != null ? Dynamicweb.Context.Current.Request["ProductID"].ToString() : "";
	string variantId = Dynamicweb.Context.Current.Request["VariantID"] != null ? Dynamicweb.Context.Current.Request["VariantID"].ToString() : "";
	Regex reg = new Regex(@"\(([^\)]+)\)");

	foreach (var node in nodes)
	{
		var page = Dynamicweb.Services.Pages.GetPage(node.PageId);
		string pageType = page.ItemType;

		var hasChildren = node.Nodes.Count() > 0;
		var nodeId = !string.IsNullOrEmpty(node.GroupId) ? node.GroupId : node.PageId.ToString();
		var inPathChecked = node.InPath ? "checked" : "";
		var inPathClass = node.InPath ? "in-path" : "";
		var activeClass = node.IsActive ? "active fw-bold" : "";

		<div class="nav-item d-flex align-items-center w-100 py-1">
			@if (pageType != "Swift_Preferences")
			{
				if (node.IsClickable)
				{
					<a class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") href="@node.Link" id="@nodeId">
						@if (!string.IsNullOrEmpty(node.GroupId))
						{
							@RenderGroupImage(node.GetProductGroup())
						}
						@node.Name
					</a>
				}
				else
				{
					<span class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") id="@nodeId">
						@if (!string.IsNullOrEmpty(node.GroupId))
						{
							@RenderGroupImage(node.GetProductGroup())
						}
						@node.Name
					</span>
				}

				if (hasChildren)
				{
					<label class="nav-link position-relative" for="nav_@nodeId">
						@RenderStaticIcon("arrow-right")
					</label>
					<input type="checkbox" class="visually-hidden sub-nav-check" id="nav_@nodeId" @inPathChecked>
					<div class="nav sub-nav position-absolute h-100 opacity-0 pe-none invisible w-100 left-0 top-0">
						<div class="h-100 w-100 overflow-y-auto overflow-x-hidden">
							<div class="nav-header position-relative d-flex align-items-center py-1">
								<label class="nav-link position-relative" for="nav_@nodeId">
									@RenderStaticIcon("arrow-left")
								</label>
								<div class="nav-link position-relative ps-0 flex-fill"><span>@node.Name</span></div>
							</div>

							@RenderNodes(node.Nodes)
							@RenderProductGroupPromotionImage(node.GetProductGroup(), node.Link)
						</div>
					</div>
				}
			}
			else
			{
				bool countrySelector = page.Item["CountrySelector"] != null ? Convert.ToBoolean(page.Item["CountrySelector"].ToString()) : false;
				bool languageSelector = page.Item["LanguageSelector"] != null ? Convert.ToBoolean(page.Item["LanguageSelector"].ToString()) : false;
				bool currencySelector = page.Item["CurrencySelector"] != null ? Convert.ToBoolean(page.Item["CurrencySelector"].ToString()) : false;
				string name = Translate("Preferences");
				string icon = "";

				if (languageSelector)
				{
					bool hideIcon = page.Item["HideIcon"] != null ? Convert.ToBoolean(page.Item["HideIcon"].ToString()) : false;

					if (!hideIcon)
					{
						string iconFolder = "/Files/FlagIcons/";
						icon = iconFolder + Pageview.Area.CultureInfo.Name.ToLower() + ".svg";
					}

					name = reg.Replace(Pageview.Area.CultureInfo.DisplayName, "");
				}

				<form action="/Default.aspx?ID=@node.PageId" data-response-target-element="PreferencesModalContent" data-layout-template="Swift_Preferences.cshtml" data-preloader="inline" class="w-100">
					<input type="hidden" name="Layout" value="modal" />
					<input type="hidden" name="CurrentPageID" value="@Pageview.ID" />
					<input type="hidden" name="GroupID" value="@groupId" />
					<input type="hidden" name="ProductID" value="@productId" />
					<input type="hidden" name="VariantID" value="@variantId" />
					<a href="#" role="button" onclick="swift.PageUpdater.Update(event)" class="nav-link position-relative flex-fill @activeClass @inPathClass" @(node.IsActive ? "aria-current='page'" : "") data-bs-toggle="modal" data-bs-target="#PreferencesModal">
						@if (icon != "")
						{
							if (Path.GetExtension(icon).ToLower() == ".svg" && !icon.ToLower().Contains("none"))
							{
								string iconPath = Dynamicweb.Context.Current.Server.MapPath(icon);

								<span class="icon-2">
									@ReadFile(iconPath)
								</span>
							}
						}
						<span class="align-middle">@name</span>
					</a>
				</form>
			}
		</div>
	}
}


@helper RenderStaticIcon(string icon)
{
	string iconPath = "/Files/Templates/Designs/Swift/Assets/icons/" + icon + ".svg";

	if (!iconPath.ToLower().Contains("none") && iconPath != "")
	{
		iconPath = Dynamicweb.Context.Current.Server.MapPath(iconPath);

		<span class="pe-none">
			@ReadFile(iconPath)
		</span>
	}
}

@helper RenderProductGroupPromotionImage(ProductGroupViewModel group, string link)
{
	IList<FieldValueViewModel> groupFields = group.GroupFields != null ? group.GroupFields : null;

	if (groupFields != null)
	{
		var groupName = group.Name;
		string ratio = Model.Parameters["ImageAspectRatio"] != null ? Model.Parameters["ImageAspectRatio"].ToString() : string.Empty;
		ratio = ratio != "0" ? ratio : string.Empty;
		string ratioCssClass = ratio != string.Empty ? " ratio" : string.Empty;
		string ratioVariable = ratio != string.Empty ? "style=\"--bs-aspect-ratio: " + ratio + "\"" : string.Empty;
		string productGroupPromotionImage = string.Empty;
		string productGroupPromotionImagePath = string.Empty;
		string productGroupPromotionDescription = string.Empty;
		string productGroupPromotionLinkLabel = string.Empty;
		string productGroupPromotionLink = string.Empty;
		string productGroupPromotionImageTheme = Model.Parameters.ContainsKey("ProductGroupPromotionImageTheme") ? Model.Parameters["ProductGroupPromotionImageTheme"].ToString().ToLower() : string.Empty;
		string gridGap = !string.IsNullOrEmpty(productGroupPromotionImageTheme) ? "gap-0" : "gap-3";
		string themePadding = !string.IsNullOrEmpty(productGroupPromotionImageTheme) ? "p-3" : "p-0";
		bool showProductGroupPromotionImage = Model.Parameters.ContainsKey("ShowProductGroupPromotionImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupPromotionImage"].ToString()) : false;


		foreach (FieldValueViewModel field in groupFields)
		{
			if (field.SystemName == "ProductGroupPromotionImage")
			{
				productGroupPromotionImage = field.Value != null ? field.Value.ToString() : string.Empty;
				productGroupPromotionImagePath = "/Admin/Public/GetImage.ashx?Width=" + 480 + "&crop=0&image=" + "Files/Images/" + productGroupPromotionImage;
			}
			if (field.SystemName == "ProductGroupPromotionDescription")
			{
				productGroupPromotionDescription = field.Value != null ? field.Value.ToString() : string.Empty;
			}
			if (field.SystemName == "ProductGroupPromotionLinkLabel")
			{
				productGroupPromotionLinkLabel = field.Value != null ? field.Value.ToString() : string.Empty;
			}
			if (field.SystemName == "ProductGroupPromotionLink")
			{
				productGroupPromotionLink = field.Value != null ? field.Value.ToString() : string.Empty;
			}
		}
		if (showProductGroupPromotionImage)
		{
			<div class="grid grid-1 mx-3 @gridGap@(productGroupPromotionImageTheme)">
				@if (productGroupPromotionImage != string.Empty)
				{
					productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : link;

					<a href="@productGroupPromotionLink" title="@groupName">
						<figure class="m-0@(ratioCssClass)" @ratioVariable>
							<img class="img-fluid" src="@productGroupPromotionImagePath" alt="@groupName" style="object-fit:cover">
						</figure>
					</a>
				}
				@if (!string.IsNullOrEmpty(productGroupPromotionDescription) || !string.IsNullOrEmpty(productGroupPromotionLinkLabel))
				{
					<div class="grid grid-1 @themePadding ">

						@if (!string.IsNullOrEmpty(productGroupPromotionDescription))
						{
							<h6 class="m-0">@productGroupPromotionDescription</h6>
						}
						@if (!string.IsNullOrEmpty(productGroupPromotionLinkLabel))
						{
							productGroupPromotionLink = !string.IsNullOrEmpty(productGroupPromotionLink) ? productGroupPromotionLink : link;

							<a href="@productGroupPromotionLink" title="@productGroupPromotionLinkLabel" class="btn btn-link text-start border-0 p-0">@productGroupPromotionLinkLabel</a>
						}
					</div>
				}
			</div>
		}
	}
}


@helper RenderGroupImage(ProductGroupViewModel group)
{
	string productGroupImageShape = Model.Parameters["ProductGroupImageShape"] != null ? Model.Parameters["ProductGroupImageShape"].ToString() : string.Empty;
	string productGroupImageSize = "24";
	bool showProductGroupImage = Model.Parameters.ContainsKey("ShowProductGroupImage") ? Convert.ToBoolean(Model.Parameters["ShowProductGroupImage"].ToString()) : false;

	IList<FieldValueViewModel> groupFields = group.GroupFields;

	if (showProductGroupImage)
	{
		if (groupFields != null)
		{
			foreach (FieldValueViewModel field in groupFields)
			{
				if (field.SystemName == "ProductGroupNavigationImage")
				{
					if (!string.IsNullOrEmpty(field.Value.ToString()))
					{
						var groupImage = field.Value.ToString();
						var groupName = group.Name;
						var imagePath = "/Admin/Public/GetImage.ashx?Image=" + "/Files/Images/" + groupImage + "&Width=" + productGroupImageSize + "&Height=" + productGroupImageSize + "&crop=0";

						if (Path.GetExtension(groupImage).ToLower() == ".svg")
						{
							<div class="icon-auto me-2 @productGroupImageShape" style="height: @(productGroupImageSize)px; width: @(productGroupImageSize)px;">
								@ReadFile("/Files/Images/" + groupImage)
							</div>
						}
						else
						{
							<img loading="lazy" class="me-2 @productGroupImageShape" alt="@groupName" width="@productGroupImageSize" height="@productGroupImageSize" src="@imagePath">
						}
					}

				}
			}
		}
	}

}
