@inherits ViewModelTemplate<ProductViewModel>
@using Dynamicweb.Rendering
@using Dynamicweb.Ecommerce.ProductCatalog
@using Dynamicweb.Core

@{
	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("og:image", Model.DefaultImage.Value);
	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("og:image:alt", Model.Name);
	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("og:description", string.IsNullOrEmpty(Model.MetaDescription) ? Model.Name : Model.MetaDescription);

	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("twitter:image", Model.DefaultImage.Value);
	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("twitter:image:alt", Model.Name);
	Dynamicweb.Frontend.PageView.Current().Meta.AddTag("twitter:description", string.IsNullOrEmpty(Model.MetaDescription) ? Model.Name : Model.MetaDescription);
}

@{
	if (Dynamicweb.Context.Current.Items.Contains("ProductDetails"))
	{
		Dynamicweb.Context.Current.Items["ProductDetails"] = Model;
	}
	else
	{
		Dynamicweb.Context.Current.Items.Add("ProductDetails", Model);
	}

	bool isLazyLoadingForProductInfoEnabled = Dynamicweb.Ecommerce.DynamicwebLiveIntegration.TemplatesHelper.IsLazyLoadingForProductInfoEnabled;
	if (isLazyLoadingForProductInfoEnabled)
	{
		string showPricesWithVat = Pageview.Area.EcomPricesWithVat.ToLower();
		bool neverShowVat = string.IsNullOrEmpty(showPricesWithVat);
		bool hasVariantId = !string.IsNullOrEmpty(Model.VariantId);
		string variantIdParam = hasVariantId ? $"/{Model.VariantId}" : "";
		string priceFilledProperties = $"Price,PriceFormatted{(showPricesWithVat == "false" && !neverShowVat ? ",PriceWithVat,PriceWithVatFormatted" : "")}";
		string productInfoFeed = $@"/dwapi/ecommerce/products/{Model.Id}{variantIdParam}
					?UserId={Converter.ToString(Pageview.User?.ID)}
					&LanguageId={Pageview.Area.EcomLanguageId}&CurrencyCode={Pageview.Area.EcomCurrencyId}&CountryCode={Pageview.Area.EcomCountryCode}&ShopId={Pageview.Area.EcomShopId}
					&FilledProperties=Id,Price,PriceBeforeDiscount,StockLevel,VariantInfo,NeverOutOfstock,Prices
					&PriceSettings.ShowPricesWithVat={Pageview.Area.EcomPricesWithVat}
					&PriceSettings.FilledProperties={priceFilledProperties}
					&getproductinfo=true";
		Dynamicweb.Context.Current.Items["ProductInfoFeed"] = productInfoFeed;

		<script type="module">
			swift.LiveProductInfo.init();
		</script>
	}
}

<script type="module" src="~/Files/Templates/Designs/Swift/Assets/js/tiny-slider.js"></script>
<script type="module">
	swift.AssetLoader.Load('Files/Templates/Designs/Swift/Assets/css/tiny-slider.css', 'css');
</script>
<script>
	//Initialize the sliders
	window.addEventListener('load', function (event) {
		swift.Sliders.init();
		swift.Video.init();
	});
</script>
